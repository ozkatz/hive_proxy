// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/ozkatz/hive_proxy/pkg/hive/generated/gen-go/fb303"
	"github.com/ozkatz/hive_proxy/pkg/hive/generated/gen-go/hive_metastore"
)

var _ = fb303.GoUnusedProtection__
var _ = hive_metastore.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string getMetaConf(string key)")
  fmt.Fprintln(os.Stderr, "  void setMetaConf(string key, string value)")
  fmt.Fprintln(os.Stderr, "  void create_catalog(CreateCatalogRequest catalog)")
  fmt.Fprintln(os.Stderr, "  void alter_catalog(AlterCatalogRequest rqst)")
  fmt.Fprintln(os.Stderr, "  GetCatalogResponse get_catalog(GetCatalogRequest catName)")
  fmt.Fprintln(os.Stderr, "  GetCatalogsResponse get_catalogs()")
  fmt.Fprintln(os.Stderr, "  void drop_catalog(DropCatalogRequest catName)")
  fmt.Fprintln(os.Stderr, "  void create_database(Database database)")
  fmt.Fprintln(os.Stderr, "  Database get_database(string name)")
  fmt.Fprintln(os.Stderr, "  void drop_database(string name, bool deleteData, bool cascade)")
  fmt.Fprintln(os.Stderr, "   get_databases(string pattern)")
  fmt.Fprintln(os.Stderr, "   get_all_databases()")
  fmt.Fprintln(os.Stderr, "  void alter_database(string dbname, Database db)")
  fmt.Fprintln(os.Stderr, "  Type get_type(string name)")
  fmt.Fprintln(os.Stderr, "  bool create_type(Type type)")
  fmt.Fprintln(os.Stderr, "  bool drop_type(string type)")
  fmt.Fprintln(os.Stderr, "   get_type_all(string name)")
  fmt.Fprintln(os.Stderr, "   get_fields(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_fields_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "   get_schema(string db_name, string table_name)")
  fmt.Fprintln(os.Stderr, "   get_schema_with_environment_context(string db_name, string table_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void create_table(Table tbl)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_environment_context(Table tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void create_table_with_constraints(Table tbl,  primaryKeys,  foreignKeys,  uniqueConstraints,  notNullConstraints,  defaultConstraints,  checkConstraints)")
  fmt.Fprintln(os.Stderr, "  void drop_constraint(DropConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_primary_key(AddPrimaryKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_foreign_key(AddForeignKeyRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_unique_constraint(AddUniqueConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_not_null_constraint(AddNotNullConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_default_constraint(AddDefaultConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void add_check_constraint(AddCheckConstraintRequest req)")
  fmt.Fprintln(os.Stderr, "  void drop_table(string dbname, string name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  void drop_table_with_environment_context(string dbname, string name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void truncate_table(string dbName, string tableName,  partNames)")
  fmt.Fprintln(os.Stderr, "   get_tables(string db_name, string pattern)")
  fmt.Fprintln(os.Stderr, "   get_tables_by_type(string db_name, string pattern, string tableType)")
  fmt.Fprintln(os.Stderr, "   get_materialized_views_for_rewriting(string db_name)")
  fmt.Fprintln(os.Stderr, "   get_table_meta(string db_patterns, string tbl_patterns,  tbl_types)")
  fmt.Fprintln(os.Stderr, "   get_all_tables(string db_name)")
  fmt.Fprintln(os.Stderr, "  Table get_table(string dbname, string tbl_name)")
  fmt.Fprintln(os.Stderr, "   get_table_objects_by_name(string dbname,  tbl_names)")
  fmt.Fprintln(os.Stderr, "  GetTableResult get_table_req(GetTableRequest req)")
  fmt.Fprintln(os.Stderr, "  GetTablesResult get_table_objects_by_name_req(GetTablesRequest req)")
  fmt.Fprintln(os.Stderr, "  Materialization get_materialization_invalidation_info(CreationMetadata creation_metadata, string validTxnList)")
  fmt.Fprintln(os.Stderr, "  void update_creation_metadata(string catName, string dbname, string tbl_name, CreationMetadata creation_metadata)")
  fmt.Fprintln(os.Stderr, "   get_table_names_by_filter(string dbname, string filter, i16 max_tables)")
  fmt.Fprintln(os.Stderr, "  void alter_table(string dbname, string tbl_name, Table new_tbl)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_environment_context(string dbname, string tbl_name, Table new_tbl, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void alter_table_with_cascade(string dbname, string tbl_name, Table new_tbl, bool cascade)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition(Partition new_part)")
  fmt.Fprintln(os.Stderr, "  Partition add_partition_with_environment_context(Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions( new_parts)")
  fmt.Fprintln(os.Stderr, "  i32 add_partitions_pspec( new_parts)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  AddPartitionsResult add_partitions_req(AddPartitionsRequest request)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_with_environment_context(string db_name, string tbl_name,  part_vals, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "  Partition append_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition(string db_name, string tbl_name,  part_vals, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_with_environment_context(string db_name, string tbl_name,  part_vals, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name(string db_name, string tbl_name, string part_name, bool deleteData)")
  fmt.Fprintln(os.Stderr, "  bool drop_partition_by_name_with_environment_context(string db_name, string tbl_name, string part_name, bool deleteData, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  DropPartitionsResult drop_partitions_req(DropPartitionsRequest req)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition(string db_name, string tbl_name,  part_vals)")
  fmt.Fprintln(os.Stderr, "  Partition exchange_partition( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "   exchange_partitions( partitionSpecs, string source_db, string source_table_name, string dest_db, string dest_table_name)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_with_auth(string db_name, string tbl_name,  part_vals, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  Partition get_partition_by_name(string db_name, string tbl_name, string part_name)")
  fmt.Fprintln(os.Stderr, "   get_partitions(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_with_auth(string db_name, string tbl_name, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partitions_pspec(string db_name, string tbl_name, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partition_names(string db_name, string tbl_name, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionValuesResponse get_partition_values(PartitionValuesRequest request)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_ps_with_auth(string db_name, string tbl_name,  part_vals, i16 max_parts, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   get_partition_names_ps(string db_name, string tbl_name,  part_vals, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_filter(string db_name, string tbl_name, string filter, i16 max_parts)")
  fmt.Fprintln(os.Stderr, "   get_part_specs_by_filter(string db_name, string tbl_name, string filter, i32 max_parts)")
  fmt.Fprintln(os.Stderr, "  PartitionsByExprResult get_partitions_by_expr(PartitionsByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  i32 get_num_partitions_by_filter(string db_name, string tbl_name, string filter)")
  fmt.Fprintln(os.Stderr, "   get_partitions_by_names(string db_name, string tbl_name,  names)")
  fmt.Fprintln(os.Stderr, "  void alter_partition(string db_name, string tbl_name, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions(string db_name, string tbl_name,  new_parts)")
  fmt.Fprintln(os.Stderr, "  void alter_partitions_with_environment_context(string db_name, string tbl_name,  new_parts, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void alter_partition_with_environment_context(string db_name, string tbl_name, Partition new_part, EnvironmentContext environment_context)")
  fmt.Fprintln(os.Stderr, "  void rename_partition(string db_name, string tbl_name,  part_vals, Partition new_part)")
  fmt.Fprintln(os.Stderr, "  bool partition_name_has_valid_characters( part_vals, bool throw_exception)")
  fmt.Fprintln(os.Stderr, "  string get_config_value(string name, string defaultValue)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_vals(string part_name)")
  fmt.Fprintln(os.Stderr, "   partition_name_to_spec(string part_name)")
  fmt.Fprintln(os.Stderr, "  void markPartitionForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  bool isPartitionMarkedForEvent(string db_name, string tbl_name,  part_vals, PartitionEventType eventType)")
  fmt.Fprintln(os.Stderr, "  PrimaryKeysResponse get_primary_keys(PrimaryKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  ForeignKeysResponse get_foreign_keys(ForeignKeysRequest request)")
  fmt.Fprintln(os.Stderr, "  UniqueConstraintsResponse get_unique_constraints(UniqueConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  NotNullConstraintsResponse get_not_null_constraints(NotNullConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  DefaultConstraintsResponse get_default_constraints(DefaultConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  CheckConstraintsResponse get_check_constraints(CheckConstraintsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool update_table_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  bool update_partition_column_statistics(ColumnStatistics stats_obj)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  ColumnStatistics get_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  TableStatsResult get_table_statistics_req(TableStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  PartitionsStatsResult get_partitions_statistics_req(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  AggrStats get_aggr_stats_for(PartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool set_aggr_stats_for(SetPartitionsStatsRequest request)")
  fmt.Fprintln(os.Stderr, "  bool delete_partition_column_statistics(string db_name, string tbl_name, string part_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  bool delete_table_column_statistics(string db_name, string tbl_name, string col_name)")
  fmt.Fprintln(os.Stderr, "  void create_function(Function func)")
  fmt.Fprintln(os.Stderr, "  void drop_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  void alter_function(string dbName, string funcName, Function newFunc)")
  fmt.Fprintln(os.Stderr, "   get_functions(string dbName, string pattern)")
  fmt.Fprintln(os.Stderr, "  Function get_function(string dbName, string funcName)")
  fmt.Fprintln(os.Stderr, "  GetAllFunctionsResponse get_all_functions()")
  fmt.Fprintln(os.Stderr, "  bool create_role(Role role)")
  fmt.Fprintln(os.Stderr, "  bool drop_role(string role_name)")
  fmt.Fprintln(os.Stderr, "   get_role_names()")
  fmt.Fprintln(os.Stderr, "  bool grant_role(string role_name, string principal_name, PrincipalType principal_type, string grantor, PrincipalType grantorType, bool grant_option)")
  fmt.Fprintln(os.Stderr, "  bool revoke_role(string role_name, string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "   list_roles(string principal_name, PrincipalType principal_type)")
  fmt.Fprintln(os.Stderr, "  GrantRevokeRoleResponse grant_revoke_role(GrantRevokeRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetPrincipalsInRoleResponse get_principals_in_role(GetPrincipalsInRoleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetRoleGrantsForPrincipalResponse get_role_grants_for_principal(GetRoleGrantsForPrincipalRequest request)")
  fmt.Fprintln(os.Stderr, "  PrincipalPrivilegeSet get_privilege_set(HiveObjectRef hiveObject, string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "   list_privileges(string principal_name, PrincipalType principal_type, HiveObjectRef hiveObject)")
  fmt.Fprintln(os.Stderr, "  bool grant_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  bool revoke_privileges(PrivilegeBag privileges)")
  fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse grant_revoke_privileges(GrantRevokePrivilegeRequest request)")
  fmt.Fprintln(os.Stderr, "  GrantRevokePrivilegeResponse refresh_privileges(HiveObjectRef objToRefresh, string authorizer, GrantRevokePrivilegeRequest grantRequest)")
  fmt.Fprintln(os.Stderr, "   set_ugi(string user_name,  group_names)")
  fmt.Fprintln(os.Stderr, "  string get_delegation_token(string token_owner, string renewer_kerberos_principal_name)")
  fmt.Fprintln(os.Stderr, "  i64 renew_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  void cancel_delegation_token(string token_str_form)")
  fmt.Fprintln(os.Stderr, "  bool add_token(string token_identifier, string delegation_token)")
  fmt.Fprintln(os.Stderr, "  bool remove_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "  string get_token(string token_identifier)")
  fmt.Fprintln(os.Stderr, "   get_all_token_identifiers()")
  fmt.Fprintln(os.Stderr, "  i32 add_master_key(string key)")
  fmt.Fprintln(os.Stderr, "  void update_master_key(i32 seq_number, string key)")
  fmt.Fprintln(os.Stderr, "  bool remove_master_key(i32 key_seq)")
  fmt.Fprintln(os.Stderr, "   get_master_keys()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsResponse get_open_txns()")
  fmt.Fprintln(os.Stderr, "  GetOpenTxnsInfoResponse get_open_txns_info()")
  fmt.Fprintln(os.Stderr, "  OpenTxnsResponse open_txns(OpenTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txn(AbortTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void abort_txns(AbortTxnsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void commit_txn(CommitTxnRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void repl_tbl_writeid_state(ReplTblWriteIdStateRequest rqst)")
  fmt.Fprintln(os.Stderr, "  GetValidWriteIdsResponse get_valid_write_ids(GetValidWriteIdsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  AllocateTableWriteIdsResponse allocate_table_write_ids(AllocateTableWriteIdsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse lock(LockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse check_lock(CheckLockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void unlock(UnlockRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowLocksResponse show_locks(ShowLocksRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void heartbeat(HeartbeatRequest ids)")
  fmt.Fprintln(os.Stderr, "  HeartbeatTxnRangeResponse heartbeat_txn_range(HeartbeatTxnRangeRequest txns)")
  fmt.Fprintln(os.Stderr, "  void compact(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CompactionResponse compact2(CompactionRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ShowCompactResponse show_compact(ShowCompactRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void add_dynamic_partitions(AddDynamicPartitions rqst)")
  fmt.Fprintln(os.Stderr, "  NotificationEventResponse get_next_notification(NotificationEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  CurrentNotificationEventId get_current_notificationEventId()")
  fmt.Fprintln(os.Stderr, "  NotificationEventsCountResponse get_notification_events_count(NotificationEventsCountRequest rqst)")
  fmt.Fprintln(os.Stderr, "  FireEventResponse fire_listener_event(FireEventRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void flushCache()")
  fmt.Fprintln(os.Stderr, "  CmRecycleResponse cm_recycle(CmRecycleRequest request)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataByExprResult get_file_metadata_by_expr(GetFileMetadataByExprRequest req)")
  fmt.Fprintln(os.Stderr, "  GetFileMetadataResult get_file_metadata(GetFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  PutFileMetadataResult put_file_metadata(PutFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  ClearFileMetadataResult clear_file_metadata(ClearFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  CacheFileMetadataResult cache_file_metadata(CacheFileMetadataRequest req)")
  fmt.Fprintln(os.Stderr, "  string get_metastore_db_uuid()")
  fmt.Fprintln(os.Stderr, "  WMCreateResourcePlanResponse create_resource_plan(WMCreateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetResourcePlanResponse get_resource_plan(WMGetResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetActiveResourcePlanResponse get_active_resource_plan(WMGetActiveResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetAllResourcePlanResponse get_all_resource_plans(WMGetAllResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterResourcePlanResponse alter_resource_plan(WMAlterResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMValidateResourcePlanResponse validate_resource_plan(WMValidateResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropResourcePlanResponse drop_resource_plan(WMDropResourcePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateTriggerResponse create_wm_trigger(WMCreateTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterTriggerResponse alter_wm_trigger(WMAlterTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropTriggerResponse drop_wm_trigger(WMDropTriggerRequest request)")
  fmt.Fprintln(os.Stderr, "  WMGetTriggersForResourePlanResponse get_triggers_for_resourceplan(WMGetTriggersForResourePlanRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreatePoolResponse create_wm_pool(WMCreatePoolRequest request)")
  fmt.Fprintln(os.Stderr, "  WMAlterPoolResponse alter_wm_pool(WMAlterPoolRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropPoolResponse drop_wm_pool(WMDropPoolRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateOrUpdateMappingResponse create_or_update_wm_mapping(WMCreateOrUpdateMappingRequest request)")
  fmt.Fprintln(os.Stderr, "  WMDropMappingResponse drop_wm_mapping(WMDropMappingRequest request)")
  fmt.Fprintln(os.Stderr, "  WMCreateOrDropTriggerToPoolMappingResponse create_or_drop_wm_trigger_to_pool_mapping(WMCreateOrDropTriggerToPoolMappingRequest request)")
  fmt.Fprintln(os.Stderr, "  void create_ischema(ISchema schema)")
  fmt.Fprintln(os.Stderr, "  void alter_ischema(AlterISchemaRequest rqst)")
  fmt.Fprintln(os.Stderr, "  ISchema get_ischema(ISchemaName name)")
  fmt.Fprintln(os.Stderr, "  void drop_ischema(ISchemaName name)")
  fmt.Fprintln(os.Stderr, "  void add_schema_version(SchemaVersion schemaVersion)")
  fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_version(SchemaVersionDescriptor schemaVersion)")
  fmt.Fprintln(os.Stderr, "  SchemaVersion get_schema_latest_version(ISchemaName schemaName)")
  fmt.Fprintln(os.Stderr, "   get_schema_all_versions(ISchemaName schemaName)")
  fmt.Fprintln(os.Stderr, "  void drop_schema_version(SchemaVersionDescriptor schemaVersion)")
  fmt.Fprintln(os.Stderr, "  FindSchemasByColsResp get_schemas_by_cols(FindSchemasByColsRqst rqst)")
  fmt.Fprintln(os.Stderr, "  void map_schema_version_to_serde(MapSchemaVersionToSerdeRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void set_schema_version_state(SetSchemaVersionStateRequest rqst)")
  fmt.Fprintln(os.Stderr, "  void add_serde(SerDeInfo serde)")
  fmt.Fprintln(os.Stderr, "  SerDeInfo get_serde(GetSerdeRequest rqst)")
  fmt.Fprintln(os.Stderr, "  LockResponse get_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
  fmt.Fprintln(os.Stderr, "  bool heartbeat_lock_materialization_rebuild(string dbName, string tableName, i64 txnId)")
  fmt.Fprintln(os.Stderr, "  void add_runtime_stats(RuntimeStat stat)")
  fmt.Fprintln(os.Stderr, "   get_runtime_stats(GetRuntimeStatsRequest rqst)")
  fmt.Fprintln(os.Stderr, "  string getName()")
  fmt.Fprintln(os.Stderr, "  string getVersion()")
  fmt.Fprintln(os.Stderr, "  fb_status getStatus()")
  fmt.Fprintln(os.Stderr, "  string getStatusDetails()")
  fmt.Fprintln(os.Stderr, "   getCounters()")
  fmt.Fprintln(os.Stderr, "  i64 getCounter(string key)")
  fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
  fmt.Fprintln(os.Stderr, "  string getOption(string key)")
  fmt.Fprintln(os.Stderr, "   getOptions()")
  fmt.Fprintln(os.Stderr, "  string getCpuProfile(i32 profileDurationInSec)")
  fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
  fmt.Fprintln(os.Stderr, "  void reinitialize()")
  fmt.Fprintln(os.Stderr, "  void shutdown()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hive_metastore.NewThriftHiveMetastoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getMetaConf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMetaConf requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMetaConf(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setMetaConf":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetMetaConf requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetMetaConf(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateCatalog requires 1 args")
      flag.Usage()
    }
    arg1436 := flag.Arg(1)
    mbTrans1437 := thrift.NewTMemoryBufferLen(len(arg1436))
    defer mbTrans1437.Close()
    _, err1438 := mbTrans1437.WriteString(arg1436)
    if err1438 != nil {
      Usage()
      return
    }
    factory1439 := thrift.NewTJSONProtocolFactory()
    jsProt1440 := factory1439.GetProtocol(mbTrans1437)
    argvalue0 := hive_metastore.NewCreateCatalogRequest()
    err1441 := argvalue0.Read(context.Background(), jsProt1440)
    if err1441 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateCatalog(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterCatalog requires 1 args")
      flag.Usage()
    }
    arg1442 := flag.Arg(1)
    mbTrans1443 := thrift.NewTMemoryBufferLen(len(arg1442))
    defer mbTrans1443.Close()
    _, err1444 := mbTrans1443.WriteString(arg1442)
    if err1444 != nil {
      Usage()
      return
    }
    factory1445 := thrift.NewTJSONProtocolFactory()
    jsProt1446 := factory1445.GetProtocol(mbTrans1443)
    argvalue0 := hive_metastore.NewAlterCatalogRequest()
    err1447 := argvalue0.Read(context.Background(), jsProt1446)
    if err1447 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterCatalog(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCatalog requires 1 args")
      flag.Usage()
    }
    arg1448 := flag.Arg(1)
    mbTrans1449 := thrift.NewTMemoryBufferLen(len(arg1448))
    defer mbTrans1449.Close()
    _, err1450 := mbTrans1449.WriteString(arg1448)
    if err1450 != nil {
      Usage()
      return
    }
    factory1451 := thrift.NewTJSONProtocolFactory()
    jsProt1452 := factory1451.GetProtocol(mbTrans1449)
    argvalue0 := hive_metastore.NewGetCatalogRequest()
    err1453 := argvalue0.Read(context.Background(), jsProt1452)
    if err1453 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCatalog(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_catalogs":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCatalogs requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCatalogs(context.Background()))
    fmt.Print("\n")
    break
  case "drop_catalog":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropCatalog requires 1 args")
      flag.Usage()
    }
    arg1454 := flag.Arg(1)
    mbTrans1455 := thrift.NewTMemoryBufferLen(len(arg1454))
    defer mbTrans1455.Close()
    _, err1456 := mbTrans1455.WriteString(arg1454)
    if err1456 != nil {
      Usage()
      return
    }
    factory1457 := thrift.NewTJSONProtocolFactory()
    jsProt1458 := factory1457.GetProtocol(mbTrans1455)
    argvalue0 := hive_metastore.NewDropCatalogRequest()
    err1459 := argvalue0.Read(context.Background(), jsProt1458)
    if err1459 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropCatalog(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateDatabase requires 1 args")
      flag.Usage()
    }
    arg1460 := flag.Arg(1)
    mbTrans1461 := thrift.NewTMemoryBufferLen(len(arg1460))
    defer mbTrans1461.Close()
    _, err1462 := mbTrans1461.WriteString(arg1460)
    if err1462 != nil {
      Usage()
      return
    }
    factory1463 := thrift.NewTJSONProtocolFactory()
    jsProt1464 := factory1463.GetProtocol(mbTrans1461)
    argvalue0 := hive_metastore.NewDatabase()
    err1465 := argvalue0.Read(context.Background(), jsProt1464)
    if err1465 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_database":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabase requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_database":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropDatabase requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropDatabase(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_databases":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDatabases requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDatabases(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_databases":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllDatabases requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllDatabases(context.Background()))
    fmt.Print("\n")
    break
  case "alter_database":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AlterDatabase requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1472 := flag.Arg(2)
    mbTrans1473 := thrift.NewTMemoryBufferLen(len(arg1472))
    defer mbTrans1473.Close()
    _, err1474 := mbTrans1473.WriteString(arg1472)
    if err1474 != nil {
      Usage()
      return
    }
    factory1475 := thrift.NewTJSONProtocolFactory()
    jsProt1476 := factory1475.GetProtocol(mbTrans1473)
    argvalue1 := hive_metastore.NewDatabase()
    err1477 := argvalue1.Read(context.Background(), jsProt1476)
    if err1477 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AlterDatabase(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateType requires 1 args")
      flag.Usage()
    }
    arg1479 := flag.Arg(1)
    mbTrans1480 := thrift.NewTMemoryBufferLen(len(arg1479))
    defer mbTrans1480.Close()
    _, err1481 := mbTrans1480.WriteString(arg1479)
    if err1481 != nil {
      Usage()
      return
    }
    factory1482 := thrift.NewTJSONProtocolFactory()
    jsProt1483 := factory1482.GetProtocol(mbTrans1480)
    argvalue0 := hive_metastore.NewType()
    err1484 := argvalue0.Read(context.Background(), jsProt1483)
    if err1484 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_type":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropType requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropType(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_type_all":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTypeAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTypeAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_fields":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFields requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFields(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_fields_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetFieldsWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1491 := flag.Arg(3)
    mbTrans1492 := thrift.NewTMemoryBufferLen(len(arg1491))
    defer mbTrans1492.Close()
    _, err1493 := mbTrans1492.WriteString(arg1491)
    if err1493 != nil {
      Usage()
      return
    }
    factory1494 := thrift.NewTJSONProtocolFactory()
    jsProt1495 := factory1494.GetProtocol(mbTrans1492)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err1496 := argvalue2.Read(context.Background(), jsProt1495)
    if err1496 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetFieldsWithEnvironmentContext(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_schema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSchema requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetSchema(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_schema_with_environment_context":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSchemaWithEnvironmentContext requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1501 := flag.Arg(3)
    mbTrans1502 := thrift.NewTMemoryBufferLen(len(arg1501))
    defer mbTrans1502.Close()
    _, err1503 := mbTrans1502.WriteString(arg1501)
    if err1503 != nil {
      Usage()
      return
    }
    factory1504 := thrift.NewTJSONProtocolFactory()
    jsProt1505 := factory1504.GetProtocol(mbTrans1502)
    argvalue2 := hive_metastore.NewEnvironmentContext()
    err1506 := argvalue2.Read(context.Background(), jsProt1505)
    if err1506 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetSchemaWithEnvironmentContext(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_table":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 1 args")
      flag.Usage()
    }
    arg1507 := flag.Arg(1)
    mbTrans1508 := thrift.NewTMemoryBufferLen(len(arg1507))
    defer mbTrans1508.Close()
    _, err1509 := mbTrans1508.WriteString(arg1507)
    if err1509 != nil {
      Usage()
      return
    }
    factory1510 := thrift.NewTJSONProtocolFactory()
    jsProt1511 := factory1510.GetProtocol(mbTrans1508)
    argvalue0 := hive_metastore.NewTable()
    err1512 := argvalue0.Read(context.Background(), jsProt1511)
    if err1512 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_table_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTableWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg1513 := flag.Arg(1)
    mbTrans1514 := thrift.NewTMemoryBufferLen(len(arg1513))
    defer mbTrans1514.Close()
    _, err1515 := mbTrans1514.WriteString(arg1513)
    if err1515 != nil {
      Usage()
      return
    }
    factory1516 := thrift.NewTJSONProtocolFactory()
    jsProt1517 := factory1516.GetProtocol(mbTrans1514)
    argvalue0 := hive_metastore.NewTable()
    err1518 := argvalue0.Read(context.Background(), jsProt1517)
    if err1518 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1519 := flag.Arg(2)
    mbTrans1520 := thrift.NewTMemoryBufferLen(len(arg1519))
    defer mbTrans1520.Close()
    _, err1521 := mbTrans1520.WriteString(arg1519)
    if err1521 != nil {
      Usage()
      return
    }
    factory1522 := thrift.NewTJSONProtocolFactory()
    jsProt1523 := factory1522.GetProtocol(mbTrans1520)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err1524 := argvalue1.Read(context.Background(), jsProt1523)
    if err1524 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTableWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "create_table_with_constraints":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CreateTableWithConstraints requires 7 args")
      flag.Usage()
    }
    arg1525 := flag.Arg(1)
    mbTrans1526 := thrift.NewTMemoryBufferLen(len(arg1525))
    defer mbTrans1526.Close()
    _, err1527 := mbTrans1526.WriteString(arg1525)
    if err1527 != nil {
      Usage()
      return
    }
    factory1528 := thrift.NewTJSONProtocolFactory()
    jsProt1529 := factory1528.GetProtocol(mbTrans1526)
    argvalue0 := hive_metastore.NewTable()
    err1530 := argvalue0.Read(context.Background(), jsProt1529)
    if err1530 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1531 := flag.Arg(2)
    mbTrans1532 := thrift.NewTMemoryBufferLen(len(arg1531))
    defer mbTrans1532.Close()
    _, err1533 := mbTrans1532.WriteString(arg1531)
    if err1533 != nil { 
      Usage()
      return
    }
    factory1534 := thrift.NewTJSONProtocolFactory()
    jsProt1535 := factory1534.GetProtocol(mbTrans1532)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1536 := containerStruct1.ReadField2(context.Background(), jsProt1535)
    if err1536 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.PrimaryKeys
    value1 := argvalue1
    arg1537 := flag.Arg(3)
    mbTrans1538 := thrift.NewTMemoryBufferLen(len(arg1537))
    defer mbTrans1538.Close()
    _, err1539 := mbTrans1538.WriteString(arg1537)
    if err1539 != nil { 
      Usage()
      return
    }
    factory1540 := thrift.NewTJSONProtocolFactory()
    jsProt1541 := factory1540.GetProtocol(mbTrans1538)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1542 := containerStruct2.ReadField3(context.Background(), jsProt1541)
    if err1542 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ForeignKeys
    value2 := argvalue2
    arg1543 := flag.Arg(4)
    mbTrans1544 := thrift.NewTMemoryBufferLen(len(arg1543))
    defer mbTrans1544.Close()
    _, err1545 := mbTrans1544.WriteString(arg1543)
    if err1545 != nil { 
      Usage()
      return
    }
    factory1546 := thrift.NewTJSONProtocolFactory()
    jsProt1547 := factory1546.GetProtocol(mbTrans1544)
    containerStruct3 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1548 := containerStruct3.ReadField4(context.Background(), jsProt1547)
    if err1548 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.UniqueConstraints
    value3 := argvalue3
    arg1549 := flag.Arg(5)
    mbTrans1550 := thrift.NewTMemoryBufferLen(len(arg1549))
    defer mbTrans1550.Close()
    _, err1551 := mbTrans1550.WriteString(arg1549)
    if err1551 != nil { 
      Usage()
      return
    }
    factory1552 := thrift.NewTJSONProtocolFactory()
    jsProt1553 := factory1552.GetProtocol(mbTrans1550)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1554 := containerStruct4.ReadField5(context.Background(), jsProt1553)
    if err1554 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.NotNullConstraints
    value4 := argvalue4
    arg1555 := flag.Arg(6)
    mbTrans1556 := thrift.NewTMemoryBufferLen(len(arg1555))
    defer mbTrans1556.Close()
    _, err1557 := mbTrans1556.WriteString(arg1555)
    if err1557 != nil { 
      Usage()
      return
    }
    factory1558 := thrift.NewTJSONProtocolFactory()
    jsProt1559 := factory1558.GetProtocol(mbTrans1556)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1560 := containerStruct5.ReadField6(context.Background(), jsProt1559)
    if err1560 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.DefaultConstraints
    value5 := argvalue5
    arg1561 := flag.Arg(7)
    mbTrans1562 := thrift.NewTMemoryBufferLen(len(arg1561))
    defer mbTrans1562.Close()
    _, err1563 := mbTrans1562.WriteString(arg1561)
    if err1563 != nil { 
      Usage()
      return
    }
    factory1564 := thrift.NewTJSONProtocolFactory()
    jsProt1565 := factory1564.GetProtocol(mbTrans1562)
    containerStruct6 := hive_metastore.NewThriftHiveMetastoreCreateTableWithConstraintsArgs()
    err1566 := containerStruct6.ReadField7(context.Background(), jsProt1565)
    if err1566 != nil {
      Usage()
      return
    }
    argvalue6 := containerStruct6.CheckConstraints
    value6 := argvalue6
    fmt.Print(client.CreateTableWithConstraints(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "drop_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropConstraint requires 1 args")
      flag.Usage()
    }
    arg1567 := flag.Arg(1)
    mbTrans1568 := thrift.NewTMemoryBufferLen(len(arg1567))
    defer mbTrans1568.Close()
    _, err1569 := mbTrans1568.WriteString(arg1567)
    if err1569 != nil {
      Usage()
      return
    }
    factory1570 := thrift.NewTJSONProtocolFactory()
    jsProt1571 := factory1570.GetProtocol(mbTrans1568)
    argvalue0 := hive_metastore.NewDropConstraintRequest()
    err1572 := argvalue0.Read(context.Background(), jsProt1571)
    if err1572 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_primary_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPrimaryKey requires 1 args")
      flag.Usage()
    }
    arg1573 := flag.Arg(1)
    mbTrans1574 := thrift.NewTMemoryBufferLen(len(arg1573))
    defer mbTrans1574.Close()
    _, err1575 := mbTrans1574.WriteString(arg1573)
    if err1575 != nil {
      Usage()
      return
    }
    factory1576 := thrift.NewTJSONProtocolFactory()
    jsProt1577 := factory1576.GetProtocol(mbTrans1574)
    argvalue0 := hive_metastore.NewAddPrimaryKeyRequest()
    err1578 := argvalue0.Read(context.Background(), jsProt1577)
    if err1578 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPrimaryKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_foreign_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddForeignKey requires 1 args")
      flag.Usage()
    }
    arg1579 := flag.Arg(1)
    mbTrans1580 := thrift.NewTMemoryBufferLen(len(arg1579))
    defer mbTrans1580.Close()
    _, err1581 := mbTrans1580.WriteString(arg1579)
    if err1581 != nil {
      Usage()
      return
    }
    factory1582 := thrift.NewTJSONProtocolFactory()
    jsProt1583 := factory1582.GetProtocol(mbTrans1580)
    argvalue0 := hive_metastore.NewAddForeignKeyRequest()
    err1584 := argvalue0.Read(context.Background(), jsProt1583)
    if err1584 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddForeignKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_unique_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddUniqueConstraint requires 1 args")
      flag.Usage()
    }
    arg1585 := flag.Arg(1)
    mbTrans1586 := thrift.NewTMemoryBufferLen(len(arg1585))
    defer mbTrans1586.Close()
    _, err1587 := mbTrans1586.WriteString(arg1585)
    if err1587 != nil {
      Usage()
      return
    }
    factory1588 := thrift.NewTJSONProtocolFactory()
    jsProt1589 := factory1588.GetProtocol(mbTrans1586)
    argvalue0 := hive_metastore.NewAddUniqueConstraintRequest()
    err1590 := argvalue0.Read(context.Background(), jsProt1589)
    if err1590 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddUniqueConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_not_null_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddNotNullConstraint requires 1 args")
      flag.Usage()
    }
    arg1591 := flag.Arg(1)
    mbTrans1592 := thrift.NewTMemoryBufferLen(len(arg1591))
    defer mbTrans1592.Close()
    _, err1593 := mbTrans1592.WriteString(arg1591)
    if err1593 != nil {
      Usage()
      return
    }
    factory1594 := thrift.NewTJSONProtocolFactory()
    jsProt1595 := factory1594.GetProtocol(mbTrans1592)
    argvalue0 := hive_metastore.NewAddNotNullConstraintRequest()
    err1596 := argvalue0.Read(context.Background(), jsProt1595)
    if err1596 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddNotNullConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_default_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddDefaultConstraint requires 1 args")
      flag.Usage()
    }
    arg1597 := flag.Arg(1)
    mbTrans1598 := thrift.NewTMemoryBufferLen(len(arg1597))
    defer mbTrans1598.Close()
    _, err1599 := mbTrans1598.WriteString(arg1597)
    if err1599 != nil {
      Usage()
      return
    }
    factory1600 := thrift.NewTJSONProtocolFactory()
    jsProt1601 := factory1600.GetProtocol(mbTrans1598)
    argvalue0 := hive_metastore.NewAddDefaultConstraintRequest()
    err1602 := argvalue0.Read(context.Background(), jsProt1601)
    if err1602 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddDefaultConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_check_constraint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddCheckConstraint requires 1 args")
      flag.Usage()
    }
    arg1603 := flag.Arg(1)
    mbTrans1604 := thrift.NewTMemoryBufferLen(len(arg1603))
    defer mbTrans1604.Close()
    _, err1605 := mbTrans1604.WriteString(arg1603)
    if err1605 != nil {
      Usage()
      return
    }
    factory1606 := thrift.NewTJSONProtocolFactory()
    jsProt1607 := factory1606.GetProtocol(mbTrans1604)
    argvalue0 := hive_metastore.NewAddCheckConstraintRequest()
    err1608 := argvalue0.Read(context.Background(), jsProt1607)
    if err1608 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddCheckConstraint(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DropTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.DropTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "drop_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg1615 := flag.Arg(4)
    mbTrans1616 := thrift.NewTMemoryBufferLen(len(arg1615))
    defer mbTrans1616.Close()
    _, err1617 := mbTrans1616.WriteString(arg1615)
    if err1617 != nil {
      Usage()
      return
    }
    factory1618 := thrift.NewTJSONProtocolFactory()
    jsProt1619 := factory1618.GetProtocol(mbTrans1616)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1620 := argvalue3.Read(context.Background(), jsProt1619)
    if err1620 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.DropTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "truncate_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TruncateTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1623 := flag.Arg(3)
    mbTrans1624 := thrift.NewTMemoryBufferLen(len(arg1623))
    defer mbTrans1624.Close()
    _, err1625 := mbTrans1624.WriteString(arg1623)
    if err1625 != nil { 
      Usage()
      return
    }
    factory1626 := thrift.NewTJSONProtocolFactory()
    jsProt1627 := factory1626.GetProtocol(mbTrans1624)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreTruncateTableArgs()
    err1628 := containerStruct2.ReadField3(context.Background(), jsProt1627)
    if err1628 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartNames
    value2 := argvalue2
    fmt.Print(client.TruncateTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_tables":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTables requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTables(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_tables_by_type":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTablesByType requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTablesByType(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_materialized_views_for_rewriting":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMaterializedViewsForRewriting requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMaterializedViewsForRewriting(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_meta":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableMeta requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1637 := flag.Arg(3)
    mbTrans1638 := thrift.NewTMemoryBufferLen(len(arg1637))
    defer mbTrans1638.Close()
    _, err1639 := mbTrans1638.WriteString(arg1637)
    if err1639 != nil { 
      Usage()
      return
    }
    factory1640 := thrift.NewTJSONProtocolFactory()
    jsProt1641 := factory1640.GetProtocol(mbTrans1638)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetTableMetaArgs()
    err1642 := containerStruct2.ReadField3(context.Background(), jsProt1641)
    if err1642 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.TblTypes
    value2 := argvalue2
    fmt.Print(client.GetTableMeta(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_all_tables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllTables requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAllTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTable requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1647 := flag.Arg(2)
    mbTrans1648 := thrift.NewTMemoryBufferLen(len(arg1647))
    defer mbTrans1648.Close()
    _, err1649 := mbTrans1648.WriteString(arg1647)
    if err1649 != nil { 
      Usage()
      return
    }
    factory1650 := thrift.NewTJSONProtocolFactory()
    jsProt1651 := factory1650.GetProtocol(mbTrans1648)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreGetTableObjectsByNameArgs()
    err1652 := containerStruct1.ReadField2(context.Background(), jsProt1651)
    if err1652 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TblNames
    value1 := argvalue1
    fmt.Print(client.GetTableObjectsByName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_table_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableReq requires 1 args")
      flag.Usage()
    }
    arg1653 := flag.Arg(1)
    mbTrans1654 := thrift.NewTMemoryBufferLen(len(arg1653))
    defer mbTrans1654.Close()
    _, err1655 := mbTrans1654.WriteString(arg1653)
    if err1655 != nil {
      Usage()
      return
    }
    factory1656 := thrift.NewTJSONProtocolFactory()
    jsProt1657 := factory1656.GetProtocol(mbTrans1654)
    argvalue0 := hive_metastore.NewGetTableRequest()
    err1658 := argvalue0.Read(context.Background(), jsProt1657)
    if err1658 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_objects_by_name_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableObjectsByNameReq requires 1 args")
      flag.Usage()
    }
    arg1659 := flag.Arg(1)
    mbTrans1660 := thrift.NewTMemoryBufferLen(len(arg1659))
    defer mbTrans1660.Close()
    _, err1661 := mbTrans1660.WriteString(arg1659)
    if err1661 != nil {
      Usage()
      return
    }
    factory1662 := thrift.NewTJSONProtocolFactory()
    jsProt1663 := factory1662.GetProtocol(mbTrans1660)
    argvalue0 := hive_metastore.NewGetTablesRequest()
    err1664 := argvalue0.Read(context.Background(), jsProt1663)
    if err1664 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableObjectsByNameReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_materialization_invalidation_info":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMaterializationInvalidationInfo requires 2 args")
      flag.Usage()
    }
    arg1665 := flag.Arg(1)
    mbTrans1666 := thrift.NewTMemoryBufferLen(len(arg1665))
    defer mbTrans1666.Close()
    _, err1667 := mbTrans1666.WriteString(arg1665)
    if err1667 != nil {
      Usage()
      return
    }
    factory1668 := thrift.NewTJSONProtocolFactory()
    jsProt1669 := factory1668.GetProtocol(mbTrans1666)
    argvalue0 := hive_metastore.NewCreationMetadata()
    err1670 := argvalue0.Read(context.Background(), jsProt1669)
    if err1670 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetMaterializationInvalidationInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "update_creation_metadata":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateCreationMetadata requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1675 := flag.Arg(4)
    mbTrans1676 := thrift.NewTMemoryBufferLen(len(arg1675))
    defer mbTrans1676.Close()
    _, err1677 := mbTrans1676.WriteString(arg1675)
    if err1677 != nil {
      Usage()
      return
    }
    factory1678 := thrift.NewTJSONProtocolFactory()
    jsProt1679 := factory1678.GetProtocol(mbTrans1676)
    argvalue3 := hive_metastore.NewCreationMetadata()
    err1680 := argvalue3.Read(context.Background(), jsProt1679)
    if err1680 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.UpdateCreationMetadata(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_table_names_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1683 := (strconv.Atoi(flag.Arg(3)))
    if err1683 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetTableNamesByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterTable requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1686 := flag.Arg(3)
    mbTrans1687 := thrift.NewTMemoryBufferLen(len(arg1686))
    defer mbTrans1687.Close()
    _, err1688 := mbTrans1687.WriteString(arg1686)
    if err1688 != nil {
      Usage()
      return
    }
    factory1689 := thrift.NewTJSONProtocolFactory()
    jsProt1690 := factory1689.GetProtocol(mbTrans1687)
    argvalue2 := hive_metastore.NewTable()
    err1691 := argvalue2.Read(context.Background(), jsProt1690)
    if err1691 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterTable(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_table_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1694 := flag.Arg(3)
    mbTrans1695 := thrift.NewTMemoryBufferLen(len(arg1694))
    defer mbTrans1695.Close()
    _, err1696 := mbTrans1695.WriteString(arg1694)
    if err1696 != nil {
      Usage()
      return
    }
    factory1697 := thrift.NewTJSONProtocolFactory()
    jsProt1698 := factory1697.GetProtocol(mbTrans1695)
    argvalue2 := hive_metastore.NewTable()
    err1699 := argvalue2.Read(context.Background(), jsProt1698)
    if err1699 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1700 := flag.Arg(4)
    mbTrans1701 := thrift.NewTMemoryBufferLen(len(arg1700))
    defer mbTrans1701.Close()
    _, err1702 := mbTrans1701.WriteString(arg1700)
    if err1702 != nil {
      Usage()
      return
    }
    factory1703 := thrift.NewTJSONProtocolFactory()
    jsProt1704 := factory1703.GetProtocol(mbTrans1701)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1705 := argvalue3.Read(context.Background(), jsProt1704)
    if err1705 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterTableWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_table_with_cascade":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterTableWithCascade requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1708 := flag.Arg(3)
    mbTrans1709 := thrift.NewTMemoryBufferLen(len(arg1708))
    defer mbTrans1709.Close()
    _, err1710 := mbTrans1709.WriteString(arg1708)
    if err1710 != nil {
      Usage()
      return
    }
    factory1711 := thrift.NewTJSONProtocolFactory()
    jsProt1712 := factory1711.GetProtocol(mbTrans1709)
    argvalue2 := hive_metastore.NewTable()
    err1713 := argvalue2.Read(context.Background(), jsProt1712)
    if err1713 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.AlterTableWithCascade(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_partition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartition requires 1 args")
      flag.Usage()
    }
    arg1715 := flag.Arg(1)
    mbTrans1716 := thrift.NewTMemoryBufferLen(len(arg1715))
    defer mbTrans1716.Close()
    _, err1717 := mbTrans1716.WriteString(arg1715)
    if err1717 != nil {
      Usage()
      return
    }
    factory1718 := thrift.NewTJSONProtocolFactory()
    jsProt1719 := factory1718.GetProtocol(mbTrans1716)
    argvalue0 := hive_metastore.NewPartition()
    err1720 := argvalue0.Read(context.Background(), jsProt1719)
    if err1720 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartition(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partition_with_environment_context":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddPartitionWithEnvironmentContext requires 2 args")
      flag.Usage()
    }
    arg1721 := flag.Arg(1)
    mbTrans1722 := thrift.NewTMemoryBufferLen(len(arg1721))
    defer mbTrans1722.Close()
    _, err1723 := mbTrans1722.WriteString(arg1721)
    if err1723 != nil {
      Usage()
      return
    }
    factory1724 := thrift.NewTJSONProtocolFactory()
    jsProt1725 := factory1724.GetProtocol(mbTrans1722)
    argvalue0 := hive_metastore.NewPartition()
    err1726 := argvalue0.Read(context.Background(), jsProt1725)
    if err1726 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg1727 := flag.Arg(2)
    mbTrans1728 := thrift.NewTMemoryBufferLen(len(arg1727))
    defer mbTrans1728.Close()
    _, err1729 := mbTrans1728.WriteString(arg1727)
    if err1729 != nil {
      Usage()
      return
    }
    factory1730 := thrift.NewTJSONProtocolFactory()
    jsProt1731 := factory1730.GetProtocol(mbTrans1728)
    argvalue1 := hive_metastore.NewEnvironmentContext()
    err1732 := argvalue1.Read(context.Background(), jsProt1731)
    if err1732 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddPartitionWithEnvironmentContext(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "add_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitions requires 1 args")
      flag.Usage()
    }
    arg1733 := flag.Arg(1)
    mbTrans1734 := thrift.NewTMemoryBufferLen(len(arg1733))
    defer mbTrans1734.Close()
    _, err1735 := mbTrans1734.WriteString(arg1733)
    if err1735 != nil { 
      Usage()
      return
    }
    factory1736 := thrift.NewTJSONProtocolFactory()
    jsProt1737 := factory1736.GetProtocol(mbTrans1734)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsArgs()
    err1738 := containerStruct0.ReadField1(context.Background(), jsProt1737)
    if err1738 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_partitions_pspec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsPspec requires 1 args")
      flag.Usage()
    }
    arg1739 := flag.Arg(1)
    mbTrans1740 := thrift.NewTMemoryBufferLen(len(arg1739))
    defer mbTrans1740.Close()
    _, err1741 := mbTrans1740.WriteString(arg1739)
    if err1741 != nil { 
      Usage()
      return
    }
    factory1742 := thrift.NewTJSONProtocolFactory()
    jsProt1743 := factory1742.GetProtocol(mbTrans1740)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreAddPartitionsPspecArgs()
    err1744 := containerStruct0.ReadField1(context.Background(), jsProt1743)
    if err1744 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.NewParts_
    value0 := argvalue0
    fmt.Print(client.AddPartitionsPspec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1747 := flag.Arg(3)
    mbTrans1748 := thrift.NewTMemoryBufferLen(len(arg1747))
    defer mbTrans1748.Close()
    _, err1749 := mbTrans1748.WriteString(arg1747)
    if err1749 != nil { 
      Usage()
      return
    }
    factory1750 := thrift.NewTJSONProtocolFactory()
    jsProt1751 := factory1750.GetProtocol(mbTrans1748)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionArgs()
    err1752 := containerStruct2.ReadField3(context.Background(), jsProt1751)
    if err1752 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.AppendPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1753 := flag.Arg(1)
    mbTrans1754 := thrift.NewTMemoryBufferLen(len(arg1753))
    defer mbTrans1754.Close()
    _, err1755 := mbTrans1754.WriteString(arg1753)
    if err1755 != nil {
      Usage()
      return
    }
    factory1756 := thrift.NewTJSONProtocolFactory()
    jsProt1757 := factory1756.GetProtocol(mbTrans1754)
    argvalue0 := hive_metastore.NewAddPartitionsRequest()
    err1758 := argvalue0.Read(context.Background(), jsProt1757)
    if err1758 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPartitionsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "append_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1761 := flag.Arg(3)
    mbTrans1762 := thrift.NewTMemoryBufferLen(len(arg1761))
    defer mbTrans1762.Close()
    _, err1763 := mbTrans1762.WriteString(arg1761)
    if err1763 != nil { 
      Usage()
      return
    }
    factory1764 := thrift.NewTJSONProtocolFactory()
    jsProt1765 := factory1764.GetProtocol(mbTrans1762)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAppendPartitionWithEnvironmentContextArgs()
    err1766 := containerStruct2.ReadField3(context.Background(), jsProt1765)
    if err1766 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg1767 := flag.Arg(4)
    mbTrans1768 := thrift.NewTMemoryBufferLen(len(arg1767))
    defer mbTrans1768.Close()
    _, err1769 := mbTrans1768.WriteString(arg1767)
    if err1769 != nil {
      Usage()
      return
    }
    factory1770 := thrift.NewTJSONProtocolFactory()
    jsProt1771 := factory1770.GetProtocol(mbTrans1768)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1772 := argvalue3.Read(context.Background(), jsProt1771)
    if err1772 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "append_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AppendPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "append_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AppendPartitionByNameWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1779 := flag.Arg(4)
    mbTrans1780 := thrift.NewTMemoryBufferLen(len(arg1779))
    defer mbTrans1780.Close()
    _, err1781 := mbTrans1780.WriteString(arg1779)
    if err1781 != nil {
      Usage()
      return
    }
    factory1782 := thrift.NewTJSONProtocolFactory()
    jsProt1783 := factory1782.GetProtocol(mbTrans1780)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1784 := argvalue3.Read(context.Background(), jsProt1783)
    if err1784 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AppendPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1787 := flag.Arg(3)
    mbTrans1788 := thrift.NewTMemoryBufferLen(len(arg1787))
    defer mbTrans1788.Close()
    _, err1789 := mbTrans1788.WriteString(arg1787)
    if err1789 != nil { 
      Usage()
      return
    }
    factory1790 := thrift.NewTJSONProtocolFactory()
    jsProt1791 := factory1790.GetProtocol(mbTrans1788)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionArgs()
    err1792 := containerStruct2.ReadField3(context.Background(), jsProt1791)
    if err1792 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1796 := flag.Arg(3)
    mbTrans1797 := thrift.NewTMemoryBufferLen(len(arg1796))
    defer mbTrans1797.Close()
    _, err1798 := mbTrans1797.WriteString(arg1796)
    if err1798 != nil { 
      Usage()
      return
    }
    factory1799 := thrift.NewTJSONProtocolFactory()
    jsProt1800 := factory1799.GetProtocol(mbTrans1797)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreDropPartitionWithEnvironmentContextArgs()
    err1801 := containerStruct2.ReadField3(context.Background(), jsProt1800)
    if err1801 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg1803 := flag.Arg(5)
    mbTrans1804 := thrift.NewTMemoryBufferLen(len(arg1803))
    defer mbTrans1804.Close()
    _, err1805 := mbTrans1804.WriteString(arg1803)
    if err1805 != nil {
      Usage()
      return
    }
    factory1806 := thrift.NewTJSONProtocolFactory()
    jsProt1807 := factory1806.GetProtocol(mbTrans1804)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err1808 := argvalue4.Read(context.Background(), jsProt1807)
    if err1808 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partition_by_name":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DropPartitionByName requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.DropPartitionByName(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "drop_partition_by_name_with_environment_context":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "DropPartitionByNameWithEnvironmentContext requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    arg1817 := flag.Arg(5)
    mbTrans1818 := thrift.NewTMemoryBufferLen(len(arg1817))
    defer mbTrans1818.Close()
    _, err1819 := mbTrans1818.WriteString(arg1817)
    if err1819 != nil {
      Usage()
      return
    }
    factory1820 := thrift.NewTJSONProtocolFactory()
    jsProt1821 := factory1820.GetProtocol(mbTrans1818)
    argvalue4 := hive_metastore.NewEnvironmentContext()
    err1822 := argvalue4.Read(context.Background(), jsProt1821)
    if err1822 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.DropPartitionByNameWithEnvironmentContext(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "drop_partitions_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropPartitionsReq requires 1 args")
      flag.Usage()
    }
    arg1823 := flag.Arg(1)
    mbTrans1824 := thrift.NewTMemoryBufferLen(len(arg1823))
    defer mbTrans1824.Close()
    _, err1825 := mbTrans1824.WriteString(arg1823)
    if err1825 != nil {
      Usage()
      return
    }
    factory1826 := thrift.NewTJSONProtocolFactory()
    jsProt1827 := factory1826.GetProtocol(mbTrans1824)
    argvalue0 := hive_metastore.NewDropPartitionsRequest()
    err1828 := argvalue0.Read(context.Background(), jsProt1827)
    if err1828 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropPartitionsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1831 := flag.Arg(3)
    mbTrans1832 := thrift.NewTMemoryBufferLen(len(arg1831))
    defer mbTrans1832.Close()
    _, err1833 := mbTrans1832.WriteString(arg1831)
    if err1833 != nil { 
      Usage()
      return
    }
    factory1834 := thrift.NewTJSONProtocolFactory()
    jsProt1835 := factory1834.GetProtocol(mbTrans1832)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionArgs()
    err1836 := containerStruct2.ReadField3(context.Background(), jsProt1835)
    if err1836 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    fmt.Print(client.GetPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "exchange_partition":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartition requires 5 args")
      flag.Usage()
    }
    arg1837 := flag.Arg(1)
    mbTrans1838 := thrift.NewTMemoryBufferLen(len(arg1837))
    defer mbTrans1838.Close()
    _, err1839 := mbTrans1838.WriteString(arg1837)
    if err1839 != nil { 
      Usage()
      return
    }
    factory1840 := thrift.NewTJSONProtocolFactory()
    jsProt1841 := factory1840.GetProtocol(mbTrans1838)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionArgs()
    err1842 := containerStruct0.ReadField1(context.Background(), jsProt1841)
    if err1842 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartition(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "exchange_partitions":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "ExchangePartitions requires 5 args")
      flag.Usage()
    }
    arg1847 := flag.Arg(1)
    mbTrans1848 := thrift.NewTMemoryBufferLen(len(arg1847))
    defer mbTrans1848.Close()
    _, err1849 := mbTrans1848.WriteString(arg1847)
    if err1849 != nil { 
      Usage()
      return
    }
    factory1850 := thrift.NewTJSONProtocolFactory()
    jsProt1851 := factory1850.GetProtocol(mbTrans1848)
    containerStruct0 := hive_metastore.NewThriftHiveMetastoreExchangePartitionsArgs()
    err1852 := containerStruct0.ReadField1(context.Background(), jsProt1851)
    if err1852 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartitionSpecs
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.ExchangePartitions(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1859 := flag.Arg(3)
    mbTrans1860 := thrift.NewTMemoryBufferLen(len(arg1859))
    defer mbTrans1860.Close()
    _, err1861 := mbTrans1860.WriteString(arg1859)
    if err1861 != nil { 
      Usage()
      return
    }
    factory1862 := thrift.NewTJSONProtocolFactory()
    jsProt1863 := factory1862.GetProtocol(mbTrans1860)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err1864 := containerStruct2.ReadField3(context.Background(), jsProt1863)
    if err1864 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1866 := flag.Arg(5)
    mbTrans1867 := thrift.NewTMemoryBufferLen(len(arg1866))
    defer mbTrans1867.Close()
    _, err1868 := mbTrans1867.WriteString(arg1866)
    if err1868 != nil { 
      Usage()
      return
    }
    factory1869 := thrift.NewTJSONProtocolFactory()
    jsProt1870 := factory1869.GetProtocol(mbTrans1867)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionWithAuthArgs()
    err1871 := containerStruct4.ReadField5(context.Background(), jsProt1870)
    if err1871 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partition_by_name":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionByName requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPartitionByName(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1877 := (strconv.Atoi(flag.Arg(3)))
    if err1877 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_with_auth":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetPartitionsWithAuth requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1880 := (strconv.Atoi(flag.Arg(3)))
    if err1880 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg1882 := flag.Arg(5)
    mbTrans1883 := thrift.NewTMemoryBufferLen(len(arg1882))
    defer mbTrans1883.Close()
    _, err1884 := mbTrans1883.WriteString(arg1882)
    if err1884 != nil { 
      Usage()
      return
    }
    factory1885 := thrift.NewTJSONProtocolFactory()
    jsProt1886 := factory1885.GetProtocol(mbTrans1883)
    containerStruct4 := hive_metastore.NewThriftHiveMetastoreGetPartitionsWithAuthArgs()
    err1887 := containerStruct4.ReadField5(context.Background(), jsProt1886)
    if err1887 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.GroupNames
    value4 := argvalue4
    fmt.Print(client.GetPartitionsWithAuth(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "get_partitions_pspec":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPspec requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1890 := (strconv.Atoi(flag.Arg(3)))
    if err1890 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionsPspec(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1893 := (strconv.Atoi(flag.Arg(3)))
    if err1893 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPartitionNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_values":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionValues requires 1 args")
      flag.Usage()
    }
    arg1894 := flag.Arg(1)
    mbTrans1895 := thrift.NewTMemoryBufferLen(len(arg1894))
    defer mbTrans1895.Close()
    _, err1896 := mbTrans1895.WriteString(arg1894)
    if err1896 != nil {
      Usage()
      return
    }
    factory1897 := thrift.NewTJSONProtocolFactory()
    jsProt1898 := factory1897.GetProtocol(mbTrans1895)
    argvalue0 := hive_metastore.NewPartitionValuesRequest()
    err1899 := argvalue0.Read(context.Background(), jsProt1898)
    if err1899 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionValues(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partitions_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1902 := flag.Arg(3)
    mbTrans1903 := thrift.NewTMemoryBufferLen(len(arg1902))
    defer mbTrans1903.Close()
    _, err1904 := mbTrans1903.WriteString(arg1902)
    if err1904 != nil { 
      Usage()
      return
    }
    factory1905 := thrift.NewTJSONProtocolFactory()
    jsProt1906 := factory1905.GetProtocol(mbTrans1903)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsArgs()
    err1907 := containerStruct2.ReadField3(context.Background(), jsProt1906)
    if err1907 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1908 := (strconv.Atoi(flag.Arg(4)))
    if err1908 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_ps_with_auth":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetPartitionsPsWithAuth requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1911 := flag.Arg(3)
    mbTrans1912 := thrift.NewTMemoryBufferLen(len(arg1911))
    defer mbTrans1912.Close()
    _, err1913 := mbTrans1912.WriteString(arg1911)
    if err1913 != nil { 
      Usage()
      return
    }
    factory1914 := thrift.NewTJSONProtocolFactory()
    jsProt1915 := factory1914.GetProtocol(mbTrans1912)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1916 := containerStruct2.ReadField3(context.Background(), jsProt1915)
    if err1916 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1917 := (strconv.Atoi(flag.Arg(4)))
    if err1917 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg1919 := flag.Arg(6)
    mbTrans1920 := thrift.NewTMemoryBufferLen(len(arg1919))
    defer mbTrans1920.Close()
    _, err1921 := mbTrans1920.WriteString(arg1919)
    if err1921 != nil { 
      Usage()
      return
    }
    factory1922 := thrift.NewTJSONProtocolFactory()
    jsProt1923 := factory1922.GetProtocol(mbTrans1920)
    containerStruct5 := hive_metastore.NewThriftHiveMetastoreGetPartitionsPsWithAuthArgs()
    err1924 := containerStruct5.ReadField6(context.Background(), jsProt1923)
    if err1924 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.GroupNames
    value5 := argvalue5
    fmt.Print(client.GetPartitionsPsWithAuth(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "get_partition_names_ps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionNamesPs requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1927 := flag.Arg(3)
    mbTrans1928 := thrift.NewTMemoryBufferLen(len(arg1927))
    defer mbTrans1928.Close()
    _, err1929 := mbTrans1928.WriteString(arg1927)
    if err1929 != nil { 
      Usage()
      return
    }
    factory1930 := thrift.NewTJSONProtocolFactory()
    jsProt1931 := factory1930.GetProtocol(mbTrans1928)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionNamesPsArgs()
    err1932 := containerStruct2.ReadField3(context.Background(), jsProt1931)
    if err1932 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err1933 := (strconv.Atoi(flag.Arg(4)))
    if err1933 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionNamesPs(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1937 := (strconv.Atoi(flag.Arg(4)))
    if err1937 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartitionsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_part_specs_by_filter":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartSpecsByFilter requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1941 := (strconv.Atoi(flag.Arg(4)))
    if err1941 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.GetPartSpecsByFilter(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_partitions_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByExpr requires 1 args")
      flag.Usage()
    }
    arg1942 := flag.Arg(1)
    mbTrans1943 := thrift.NewTMemoryBufferLen(len(arg1942))
    defer mbTrans1943.Close()
    _, err1944 := mbTrans1943.WriteString(arg1942)
    if err1944 != nil {
      Usage()
      return
    }
    factory1945 := thrift.NewTJSONProtocolFactory()
    jsProt1946 := factory1945.GetProtocol(mbTrans1943)
    argvalue0 := hive_metastore.NewPartitionsByExprRequest()
    err1947 := argvalue0.Read(context.Background(), jsProt1946)
    if err1947 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsByExpr(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_num_partitions_by_filter":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNumPartitionsByFilter requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetNumPartitionsByFilter(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partitions_by_names":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPartitionsByNames requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1953 := flag.Arg(3)
    mbTrans1954 := thrift.NewTMemoryBufferLen(len(arg1953))
    defer mbTrans1954.Close()
    _, err1955 := mbTrans1954.WriteString(arg1953)
    if err1955 != nil { 
      Usage()
      return
    }
    factory1956 := thrift.NewTJSONProtocolFactory()
    jsProt1957 := factory1956.GetProtocol(mbTrans1954)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPartitionsByNamesArgs()
    err1958 := containerStruct2.ReadField3(context.Background(), jsProt1957)
    if err1958 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Names
    value2 := argvalue2
    fmt.Print(client.GetPartitionsByNames(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partition":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartition requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1961 := flag.Arg(3)
    mbTrans1962 := thrift.NewTMemoryBufferLen(len(arg1961))
    defer mbTrans1962.Close()
    _, err1963 := mbTrans1962.WriteString(arg1961)
    if err1963 != nil {
      Usage()
      return
    }
    factory1964 := thrift.NewTJSONProtocolFactory()
    jsProt1965 := factory1964.GetProtocol(mbTrans1962)
    argvalue2 := hive_metastore.NewPartition()
    err1966 := argvalue2.Read(context.Background(), jsProt1965)
    if err1966 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterPartition(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterPartitions requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1969 := flag.Arg(3)
    mbTrans1970 := thrift.NewTMemoryBufferLen(len(arg1969))
    defer mbTrans1970.Close()
    _, err1971 := mbTrans1970.WriteString(arg1969)
    if err1971 != nil { 
      Usage()
      return
    }
    factory1972 := thrift.NewTJSONProtocolFactory()
    jsProt1973 := factory1972.GetProtocol(mbTrans1970)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsArgs()
    err1974 := containerStruct2.ReadField3(context.Background(), jsProt1973)
    if err1974 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    fmt.Print(client.AlterPartitions(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "alter_partitions_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionsWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1977 := flag.Arg(3)
    mbTrans1978 := thrift.NewTMemoryBufferLen(len(arg1977))
    defer mbTrans1978.Close()
    _, err1979 := mbTrans1978.WriteString(arg1977)
    if err1979 != nil { 
      Usage()
      return
    }
    factory1980 := thrift.NewTJSONProtocolFactory()
    jsProt1981 := factory1980.GetProtocol(mbTrans1978)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreAlterPartitionsWithEnvironmentContextArgs()
    err1982 := containerStruct2.ReadField3(context.Background(), jsProt1981)
    if err1982 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.NewParts_
    value2 := argvalue2
    arg1983 := flag.Arg(4)
    mbTrans1984 := thrift.NewTMemoryBufferLen(len(arg1983))
    defer mbTrans1984.Close()
    _, err1985 := mbTrans1984.WriteString(arg1983)
    if err1985 != nil {
      Usage()
      return
    }
    factory1986 := thrift.NewTJSONProtocolFactory()
    jsProt1987 := factory1986.GetProtocol(mbTrans1984)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err1988 := argvalue3.Read(context.Background(), jsProt1987)
    if err1988 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionsWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "alter_partition_with_environment_context":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AlterPartitionWithEnvironmentContext requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1991 := flag.Arg(3)
    mbTrans1992 := thrift.NewTMemoryBufferLen(len(arg1991))
    defer mbTrans1992.Close()
    _, err1993 := mbTrans1992.WriteString(arg1991)
    if err1993 != nil {
      Usage()
      return
    }
    factory1994 := thrift.NewTJSONProtocolFactory()
    jsProt1995 := factory1994.GetProtocol(mbTrans1992)
    argvalue2 := hive_metastore.NewPartition()
    err1996 := argvalue2.Read(context.Background(), jsProt1995)
    if err1996 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg1997 := flag.Arg(4)
    mbTrans1998 := thrift.NewTMemoryBufferLen(len(arg1997))
    defer mbTrans1998.Close()
    _, err1999 := mbTrans1998.WriteString(arg1997)
    if err1999 != nil {
      Usage()
      return
    }
    factory2000 := thrift.NewTJSONProtocolFactory()
    jsProt2001 := factory2000.GetProtocol(mbTrans1998)
    argvalue3 := hive_metastore.NewEnvironmentContext()
    err2002 := argvalue3.Read(context.Background(), jsProt2001)
    if err2002 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.AlterPartitionWithEnvironmentContext(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "rename_partition":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RenamePartition requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2005 := flag.Arg(3)
    mbTrans2006 := thrift.NewTMemoryBufferLen(len(arg2005))
    defer mbTrans2006.Close()
    _, err2007 := mbTrans2006.WriteString(arg2005)
    if err2007 != nil { 
      Usage()
      return
    }
    factory2008 := thrift.NewTJSONProtocolFactory()
    jsProt2009 := factory2008.GetProtocol(mbTrans2006)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreRenamePartitionArgs()
    err2010 := containerStruct2.ReadField3(context.Background(), jsProt2009)
    if err2010 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    arg2011 := flag.Arg(4)
    mbTrans2012 := thrift.NewTMemoryBufferLen(len(arg2011))
    defer mbTrans2012.Close()
    _, err2013 := mbTrans2012.WriteString(arg2011)
    if err2013 != nil {
      Usage()
      return
    }
    factory2014 := thrift.NewTJSONProtocolFactory()
    jsProt2015 := factory2014.GetProtocol(mbTrans2012)
    argvalue3 := hive_metastore.NewPartition()
    err2016 := argvalue3.Read(context.Background(), jsProt2015)
    if err2016 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RenamePartition(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "partition_name_has_valid_characters":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PartitionNameHasValidCharacters requires 2 args")
      flag.Usage()
    }
    arg2017 := flag.Arg(1)
    mbTrans2018 := thrift.NewTMemoryBufferLen(len(arg2017))
    defer mbTrans2018.Close()
    _, err2019 := mbTrans2018.WriteString(arg2017)
    if err2019 != nil { 
      Usage()
      return
    }
    factory2020 := thrift.NewTJSONProtocolFactory()
    jsProt2021 := factory2020.GetProtocol(mbTrans2018)
    containerStruct0 := hive_metastore.NewThriftHiveMetastorePartitionNameHasValidCharactersArgs()
    err2022 := containerStruct0.ReadField1(context.Background(), jsProt2021)
    if err2022 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PartVals
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.PartitionNameHasValidCharacters(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_config_value":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetConfigValue requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetConfigValue(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "partition_name_to_vals":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToVals requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToVals(context.Background(), value0))
    fmt.Print("\n")
    break
  case "partition_name_to_spec":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PartitionNameToSpec requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.PartitionNameToSpec(context.Background(), value0))
    fmt.Print("\n")
    break
  case "markPartitionForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MarkPartitionForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2030 := flag.Arg(3)
    mbTrans2031 := thrift.NewTMemoryBufferLen(len(arg2030))
    defer mbTrans2031.Close()
    _, err2032 := mbTrans2031.WriteString(arg2030)
    if err2032 != nil { 
      Usage()
      return
    }
    factory2033 := thrift.NewTJSONProtocolFactory()
    jsProt2034 := factory2033.GetProtocol(mbTrans2031)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreMarkPartitionForEventArgs()
    err2035 := containerStruct2.ReadField3(context.Background(), jsProt2034)
    if err2035 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.MarkPartitionForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "isPartitionMarkedForEvent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IsPartitionMarkedForEvent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2038 := flag.Arg(3)
    mbTrans2039 := thrift.NewTMemoryBufferLen(len(arg2038))
    defer mbTrans2039.Close()
    _, err2040 := mbTrans2039.WriteString(arg2038)
    if err2040 != nil { 
      Usage()
      return
    }
    factory2041 := thrift.NewTJSONProtocolFactory()
    jsProt2042 := factory2041.GetProtocol(mbTrans2039)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreIsPartitionMarkedForEventArgs()
    err2043 := containerStruct2.ReadField3(context.Background(), jsProt2042)
    if err2043 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.PartVals
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := hive_metastore.PartitionEventType(tmp3)
    value3 := argvalue3
    fmt.Print(client.IsPartitionMarkedForEvent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_primary_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrimaryKeys requires 1 args")
      flag.Usage()
    }
    arg2044 := flag.Arg(1)
    mbTrans2045 := thrift.NewTMemoryBufferLen(len(arg2044))
    defer mbTrans2045.Close()
    _, err2046 := mbTrans2045.WriteString(arg2044)
    if err2046 != nil {
      Usage()
      return
    }
    factory2047 := thrift.NewTJSONProtocolFactory()
    jsProt2048 := factory2047.GetProtocol(mbTrans2045)
    argvalue0 := hive_metastore.NewPrimaryKeysRequest()
    err2049 := argvalue0.Read(context.Background(), jsProt2048)
    if err2049 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrimaryKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_foreign_keys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetForeignKeys requires 1 args")
      flag.Usage()
    }
    arg2050 := flag.Arg(1)
    mbTrans2051 := thrift.NewTMemoryBufferLen(len(arg2050))
    defer mbTrans2051.Close()
    _, err2052 := mbTrans2051.WriteString(arg2050)
    if err2052 != nil {
      Usage()
      return
    }
    factory2053 := thrift.NewTJSONProtocolFactory()
    jsProt2054 := factory2053.GetProtocol(mbTrans2051)
    argvalue0 := hive_metastore.NewForeignKeysRequest()
    err2055 := argvalue0.Read(context.Background(), jsProt2054)
    if err2055 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetForeignKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_unique_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUniqueConstraints requires 1 args")
      flag.Usage()
    }
    arg2056 := flag.Arg(1)
    mbTrans2057 := thrift.NewTMemoryBufferLen(len(arg2056))
    defer mbTrans2057.Close()
    _, err2058 := mbTrans2057.WriteString(arg2056)
    if err2058 != nil {
      Usage()
      return
    }
    factory2059 := thrift.NewTJSONProtocolFactory()
    jsProt2060 := factory2059.GetProtocol(mbTrans2057)
    argvalue0 := hive_metastore.NewUniqueConstraintsRequest()
    err2061 := argvalue0.Read(context.Background(), jsProt2060)
    if err2061 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUniqueConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_not_null_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotNullConstraints requires 1 args")
      flag.Usage()
    }
    arg2062 := flag.Arg(1)
    mbTrans2063 := thrift.NewTMemoryBufferLen(len(arg2062))
    defer mbTrans2063.Close()
    _, err2064 := mbTrans2063.WriteString(arg2062)
    if err2064 != nil {
      Usage()
      return
    }
    factory2065 := thrift.NewTJSONProtocolFactory()
    jsProt2066 := factory2065.GetProtocol(mbTrans2063)
    argvalue0 := hive_metastore.NewNotNullConstraintsRequest()
    err2067 := argvalue0.Read(context.Background(), jsProt2066)
    if err2067 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotNullConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_default_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDefaultConstraints requires 1 args")
      flag.Usage()
    }
    arg2068 := flag.Arg(1)
    mbTrans2069 := thrift.NewTMemoryBufferLen(len(arg2068))
    defer mbTrans2069.Close()
    _, err2070 := mbTrans2069.WriteString(arg2068)
    if err2070 != nil {
      Usage()
      return
    }
    factory2071 := thrift.NewTJSONProtocolFactory()
    jsProt2072 := factory2071.GetProtocol(mbTrans2069)
    argvalue0 := hive_metastore.NewDefaultConstraintsRequest()
    err2073 := argvalue0.Read(context.Background(), jsProt2072)
    if err2073 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetDefaultConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_check_constraints":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCheckConstraints requires 1 args")
      flag.Usage()
    }
    arg2074 := flag.Arg(1)
    mbTrans2075 := thrift.NewTMemoryBufferLen(len(arg2074))
    defer mbTrans2075.Close()
    _, err2076 := mbTrans2075.WriteString(arg2074)
    if err2076 != nil {
      Usage()
      return
    }
    factory2077 := thrift.NewTJSONProtocolFactory()
    jsProt2078 := factory2077.GetProtocol(mbTrans2075)
    argvalue0 := hive_metastore.NewCheckConstraintsRequest()
    err2079 := argvalue0.Read(context.Background(), jsProt2078)
    if err2079 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCheckConstraints(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_table_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateTableColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg2080 := flag.Arg(1)
    mbTrans2081 := thrift.NewTMemoryBufferLen(len(arg2080))
    defer mbTrans2081.Close()
    _, err2082 := mbTrans2081.WriteString(arg2080)
    if err2082 != nil {
      Usage()
      return
    }
    factory2083 := thrift.NewTJSONProtocolFactory()
    jsProt2084 := factory2083.GetProtocol(mbTrans2081)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err2085 := argvalue0.Read(context.Background(), jsProt2084)
    if err2085 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateTableColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_partition_column_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdatePartitionColumnStatistics requires 1 args")
      flag.Usage()
    }
    arg2086 := flag.Arg(1)
    mbTrans2087 := thrift.NewTMemoryBufferLen(len(arg2086))
    defer mbTrans2087.Close()
    _, err2088 := mbTrans2087.WriteString(arg2086)
    if err2088 != nil {
      Usage()
      return
    }
    factory2089 := thrift.NewTJSONProtocolFactory()
    jsProt2090 := factory2089.GetProtocol(mbTrans2087)
    argvalue0 := hive_metastore.NewColumnStatistics()
    err2091 := argvalue0.Read(context.Background(), jsProt2090)
    if err2091 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdatePartitionColumnStatistics(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "get_table_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg2099 := flag.Arg(1)
    mbTrans2100 := thrift.NewTMemoryBufferLen(len(arg2099))
    defer mbTrans2100.Close()
    _, err2101 := mbTrans2100.WriteString(arg2099)
    if err2101 != nil {
      Usage()
      return
    }
    factory2102 := thrift.NewTJSONProtocolFactory()
    jsProt2103 := factory2102.GetProtocol(mbTrans2100)
    argvalue0 := hive_metastore.NewTableStatsRequest()
    err2104 := argvalue0.Read(context.Background(), jsProt2103)
    if err2104 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableStatisticsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_partitions_statistics_req":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartitionsStatisticsReq requires 1 args")
      flag.Usage()
    }
    arg2105 := flag.Arg(1)
    mbTrans2106 := thrift.NewTMemoryBufferLen(len(arg2105))
    defer mbTrans2106.Close()
    _, err2107 := mbTrans2106.WriteString(arg2105)
    if err2107 != nil {
      Usage()
      return
    }
    factory2108 := thrift.NewTJSONProtocolFactory()
    jsProt2109 := factory2108.GetProtocol(mbTrans2106)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err2110 := argvalue0.Read(context.Background(), jsProt2109)
    if err2110 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartitionsStatisticsReq(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg2111 := flag.Arg(1)
    mbTrans2112 := thrift.NewTMemoryBufferLen(len(arg2111))
    defer mbTrans2112.Close()
    _, err2113 := mbTrans2112.WriteString(arg2111)
    if err2113 != nil {
      Usage()
      return
    }
    factory2114 := thrift.NewTJSONProtocolFactory()
    jsProt2115 := factory2114.GetProtocol(mbTrans2112)
    argvalue0 := hive_metastore.NewPartitionsStatsRequest()
    err2116 := argvalue0.Read(context.Background(), jsProt2115)
    if err2116 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAggrStatsFor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_aggr_stats_for":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetAggrStatsFor requires 1 args")
      flag.Usage()
    }
    arg2117 := flag.Arg(1)
    mbTrans2118 := thrift.NewTMemoryBufferLen(len(arg2117))
    defer mbTrans2118.Close()
    _, err2119 := mbTrans2118.WriteString(arg2117)
    if err2119 != nil {
      Usage()
      return
    }
    factory2120 := thrift.NewTJSONProtocolFactory()
    jsProt2121 := factory2120.GetProtocol(mbTrans2118)
    argvalue0 := hive_metastore.NewSetPartitionsStatsRequest()
    err2122 := argvalue0.Read(context.Background(), jsProt2121)
    if err2122 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetAggrStatsFor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "delete_partition_column_statistics":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DeletePartitionColumnStatistics requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.DeletePartitionColumnStatistics(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_table_column_statistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeleteTableColumnStatistics requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.DeleteTableColumnStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "create_function":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateFunction requires 1 args")
      flag.Usage()
    }
    arg2130 := flag.Arg(1)
    mbTrans2131 := thrift.NewTMemoryBufferLen(len(arg2130))
    defer mbTrans2131.Close()
    _, err2132 := mbTrans2131.WriteString(arg2130)
    if err2132 != nil {
      Usage()
      return
    }
    factory2133 := thrift.NewTJSONProtocolFactory()
    jsProt2134 := factory2133.GetProtocol(mbTrans2131)
    argvalue0 := hive_metastore.NewFunction()
    err2135 := argvalue0.Read(context.Background(), jsProt2134)
    if err2135 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateFunction(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DropFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DropFunction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "alter_function":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AlterFunction requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2140 := flag.Arg(3)
    mbTrans2141 := thrift.NewTMemoryBufferLen(len(arg2140))
    defer mbTrans2141.Close()
    _, err2142 := mbTrans2141.WriteString(arg2140)
    if err2142 != nil {
      Usage()
      return
    }
    factory2143 := thrift.NewTJSONProtocolFactory()
    jsProt2144 := factory2143.GetProtocol(mbTrans2141)
    argvalue2 := hive_metastore.NewFunction()
    err2145 := argvalue2.Read(context.Background(), jsProt2144)
    if err2145 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.AlterFunction(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "get_functions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunctions requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunctions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_function":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFunction requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetFunction(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_all_functions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllFunctions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllFunctions(context.Background()))
    fmt.Print("\n")
    break
  case "create_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateRole requires 1 args")
      flag.Usage()
    }
    arg2150 := flag.Arg(1)
    mbTrans2151 := thrift.NewTMemoryBufferLen(len(arg2150))
    defer mbTrans2151.Close()
    _, err2152 := mbTrans2151.WriteString(arg2150)
    if err2152 != nil {
      Usage()
      return
    }
    factory2153 := thrift.NewTJSONProtocolFactory()
    jsProt2154 := factory2153.GetProtocol(mbTrans2151)
    argvalue0 := hive_metastore.NewRole()
    err2155 := argvalue0.Read(context.Background(), jsProt2154)
    if err2155 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropRole requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DropRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_names":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleNames(context.Background()))
    fmt.Print("\n")
    break
  case "grant_role":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hive_metastore.PrincipalType(tmp4)
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GrantRole(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "revoke_role":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := hive_metastore.PrincipalType(tmp2)
    value2 := argvalue2
    fmt.Print(client.RevokeRole(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_roles":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    fmt.Print(client.ListRoles(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "grant_revoke_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokeRole requires 1 args")
      flag.Usage()
    }
    arg2164 := flag.Arg(1)
    mbTrans2165 := thrift.NewTMemoryBufferLen(len(arg2164))
    defer mbTrans2165.Close()
    _, err2166 := mbTrans2165.WriteString(arg2164)
    if err2166 != nil {
      Usage()
      return
    }
    factory2167 := thrift.NewTJSONProtocolFactory()
    jsProt2168 := factory2167.GetProtocol(mbTrans2165)
    argvalue0 := hive_metastore.NewGrantRevokeRoleRequest()
    err2169 := argvalue0.Read(context.Background(), jsProt2168)
    if err2169 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokeRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_principals_in_role":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrincipalsInRole requires 1 args")
      flag.Usage()
    }
    arg2170 := flag.Arg(1)
    mbTrans2171 := thrift.NewTMemoryBufferLen(len(arg2170))
    defer mbTrans2171.Close()
    _, err2172 := mbTrans2171.WriteString(arg2170)
    if err2172 != nil {
      Usage()
      return
    }
    factory2173 := thrift.NewTJSONProtocolFactory()
    jsProt2174 := factory2173.GetProtocol(mbTrans2171)
    argvalue0 := hive_metastore.NewGetPrincipalsInRoleRequest()
    err2175 := argvalue0.Read(context.Background(), jsProt2174)
    if err2175 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPrincipalsInRole(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_role_grants_for_principal":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoleGrantsForPrincipal requires 1 args")
      flag.Usage()
    }
    arg2176 := flag.Arg(1)
    mbTrans2177 := thrift.NewTMemoryBufferLen(len(arg2176))
    defer mbTrans2177.Close()
    _, err2178 := mbTrans2177.WriteString(arg2176)
    if err2178 != nil {
      Usage()
      return
    }
    factory2179 := thrift.NewTJSONProtocolFactory()
    jsProt2180 := factory2179.GetProtocol(mbTrans2177)
    argvalue0 := hive_metastore.NewGetRoleGrantsForPrincipalRequest()
    err2181 := argvalue0.Read(context.Background(), jsProt2180)
    if err2181 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRoleGrantsForPrincipal(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_privilege_set":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPrivilegeSet requires 3 args")
      flag.Usage()
    }
    arg2182 := flag.Arg(1)
    mbTrans2183 := thrift.NewTMemoryBufferLen(len(arg2182))
    defer mbTrans2183.Close()
    _, err2184 := mbTrans2183.WriteString(arg2182)
    if err2184 != nil {
      Usage()
      return
    }
    factory2185 := thrift.NewTJSONProtocolFactory()
    jsProt2186 := factory2185.GetProtocol(mbTrans2183)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err2187 := argvalue0.Read(context.Background(), jsProt2186)
    if err2187 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2189 := flag.Arg(3)
    mbTrans2190 := thrift.NewTMemoryBufferLen(len(arg2189))
    defer mbTrans2190.Close()
    _, err2191 := mbTrans2190.WriteString(arg2189)
    if err2191 != nil { 
      Usage()
      return
    }
    factory2192 := thrift.NewTJSONProtocolFactory()
    jsProt2193 := factory2192.GetProtocol(mbTrans2190)
    containerStruct2 := hive_metastore.NewThriftHiveMetastoreGetPrivilegeSetArgs()
    err2194 := containerStruct2.ReadField3(context.Background(), jsProt2193)
    if err2194 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.GroupNames
    value2 := argvalue2
    fmt.Print(client.GetPrivilegeSet(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "list_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ListPrivileges requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := hive_metastore.PrincipalType(tmp1)
    value1 := argvalue1
    arg2196 := flag.Arg(3)
    mbTrans2197 := thrift.NewTMemoryBufferLen(len(arg2196))
    defer mbTrans2197.Close()
    _, err2198 := mbTrans2197.WriteString(arg2196)
    if err2198 != nil {
      Usage()
      return
    }
    factory2199 := thrift.NewTJSONProtocolFactory()
    jsProt2200 := factory2199.GetProtocol(mbTrans2197)
    argvalue2 := hive_metastore.NewHiveObjectRef()
    err2201 := argvalue2.Read(context.Background(), jsProt2200)
    if err2201 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ListPrivileges(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "grant_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantPrivileges requires 1 args")
      flag.Usage()
    }
    arg2202 := flag.Arg(1)
    mbTrans2203 := thrift.NewTMemoryBufferLen(len(arg2202))
    defer mbTrans2203.Close()
    _, err2204 := mbTrans2203.WriteString(arg2202)
    if err2204 != nil {
      Usage()
      return
    }
    factory2205 := thrift.NewTJSONProtocolFactory()
    jsProt2206 := factory2205.GetProtocol(mbTrans2203)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err2207 := argvalue0.Read(context.Background(), jsProt2206)
    if err2207 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantPrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg2208 := flag.Arg(1)
    mbTrans2209 := thrift.NewTMemoryBufferLen(len(arg2208))
    defer mbTrans2209.Close()
    _, err2210 := mbTrans2209.WriteString(arg2208)
    if err2210 != nil {
      Usage()
      return
    }
    factory2211 := thrift.NewTJSONProtocolFactory()
    jsProt2212 := factory2211.GetProtocol(mbTrans2209)
    argvalue0 := hive_metastore.NewPrivilegeBag()
    err2213 := argvalue0.Read(context.Background(), jsProt2212)
    if err2213 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "grant_revoke_privileges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRevokePrivileges requires 1 args")
      flag.Usage()
    }
    arg2214 := flag.Arg(1)
    mbTrans2215 := thrift.NewTMemoryBufferLen(len(arg2214))
    defer mbTrans2215.Close()
    _, err2216 := mbTrans2215.WriteString(arg2214)
    if err2216 != nil {
      Usage()
      return
    }
    factory2217 := thrift.NewTJSONProtocolFactory()
    jsProt2218 := factory2217.GetProtocol(mbTrans2215)
    argvalue0 := hive_metastore.NewGrantRevokePrivilegeRequest()
    err2219 := argvalue0.Read(context.Background(), jsProt2218)
    if err2219 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRevokePrivileges(context.Background(), value0))
    fmt.Print("\n")
    break
  case "refresh_privileges":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RefreshPrivileges requires 3 args")
      flag.Usage()
    }
    arg2220 := flag.Arg(1)
    mbTrans2221 := thrift.NewTMemoryBufferLen(len(arg2220))
    defer mbTrans2221.Close()
    _, err2222 := mbTrans2221.WriteString(arg2220)
    if err2222 != nil {
      Usage()
      return
    }
    factory2223 := thrift.NewTJSONProtocolFactory()
    jsProt2224 := factory2223.GetProtocol(mbTrans2221)
    argvalue0 := hive_metastore.NewHiveObjectRef()
    err2225 := argvalue0.Read(context.Background(), jsProt2224)
    if err2225 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2227 := flag.Arg(3)
    mbTrans2228 := thrift.NewTMemoryBufferLen(len(arg2227))
    defer mbTrans2228.Close()
    _, err2229 := mbTrans2228.WriteString(arg2227)
    if err2229 != nil {
      Usage()
      return
    }
    factory2230 := thrift.NewTJSONProtocolFactory()
    jsProt2231 := factory2230.GetProtocol(mbTrans2228)
    argvalue2 := hive_metastore.NewGrantRevokePrivilegeRequest()
    err2232 := argvalue2.Read(context.Background(), jsProt2231)
    if err2232 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RefreshPrivileges(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "set_ugi":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetUgi requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2234 := flag.Arg(2)
    mbTrans2235 := thrift.NewTMemoryBufferLen(len(arg2234))
    defer mbTrans2235.Close()
    _, err2236 := mbTrans2235.WriteString(arg2234)
    if err2236 != nil { 
      Usage()
      return
    }
    factory2237 := thrift.NewTJSONProtocolFactory()
    jsProt2238 := factory2237.GetProtocol(mbTrans2235)
    containerStruct1 := hive_metastore.NewThriftHiveMetastoreSetUgiArgs()
    err2239 := containerStruct1.ReadField2(context.Background(), jsProt2238)
    if err2239 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.GroupNames
    value1 := argvalue1
    fmt.Print(client.SetUgi(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get_delegation_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetDelegationToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetDelegationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "renew_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RenewDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RenewDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cancel_delegation_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CancelDelegationToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CancelDelegationToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_token":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "remove_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_token":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_token_identifiers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllTokenIdentifiers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllTokenIdentifiers(context.Background()))
    fmt.Print("\n")
    break
  case "add_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddMasterKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AddMasterKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "update_master_key":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateMasterKey requires 2 args")
      flag.Usage()
    }
    tmp0, err2249 := (strconv.Atoi(flag.Arg(1)))
    if err2249 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateMasterKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "remove_master_key":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMasterKey requires 1 args")
      flag.Usage()
    }
    tmp0, err2251 := (strconv.Atoi(flag.Arg(1)))
    if err2251 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveMasterKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_master_keys":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMasterKeys requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMasterKeys(context.Background()))
    fmt.Print("\n")
    break
  case "get_open_txns":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxns requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxns(context.Background()))
    fmt.Print("\n")
    break
  case "get_open_txns_info":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOpenTxnsInfo requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOpenTxnsInfo(context.Background()))
    fmt.Print("\n")
    break
  case "open_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenTxns requires 1 args")
      flag.Usage()
    }
    arg2252 := flag.Arg(1)
    mbTrans2253 := thrift.NewTMemoryBufferLen(len(arg2252))
    defer mbTrans2253.Close()
    _, err2254 := mbTrans2253.WriteString(arg2252)
    if err2254 != nil {
      Usage()
      return
    }
    factory2255 := thrift.NewTJSONProtocolFactory()
    jsProt2256 := factory2255.GetProtocol(mbTrans2253)
    argvalue0 := hive_metastore.NewOpenTxnRequest()
    err2257 := argvalue0.Read(context.Background(), jsProt2256)
    if err2257 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenTxns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "abort_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxn requires 1 args")
      flag.Usage()
    }
    arg2258 := flag.Arg(1)
    mbTrans2259 := thrift.NewTMemoryBufferLen(len(arg2258))
    defer mbTrans2259.Close()
    _, err2260 := mbTrans2259.WriteString(arg2258)
    if err2260 != nil {
      Usage()
      return
    }
    factory2261 := thrift.NewTJSONProtocolFactory()
    jsProt2262 := factory2261.GetProtocol(mbTrans2259)
    argvalue0 := hive_metastore.NewAbortTxnRequest()
    err2263 := argvalue0.Read(context.Background(), jsProt2262)
    if err2263 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "abort_txns":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AbortTxns requires 1 args")
      flag.Usage()
    }
    arg2264 := flag.Arg(1)
    mbTrans2265 := thrift.NewTMemoryBufferLen(len(arg2264))
    defer mbTrans2265.Close()
    _, err2266 := mbTrans2265.WriteString(arg2264)
    if err2266 != nil {
      Usage()
      return
    }
    factory2267 := thrift.NewTJSONProtocolFactory()
    jsProt2268 := factory2267.GetProtocol(mbTrans2265)
    argvalue0 := hive_metastore.NewAbortTxnsRequest()
    err2269 := argvalue0.Read(context.Background(), jsProt2268)
    if err2269 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AbortTxns(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commit_txn":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitTxn requires 1 args")
      flag.Usage()
    }
    arg2270 := flag.Arg(1)
    mbTrans2271 := thrift.NewTMemoryBufferLen(len(arg2270))
    defer mbTrans2271.Close()
    _, err2272 := mbTrans2271.WriteString(arg2270)
    if err2272 != nil {
      Usage()
      return
    }
    factory2273 := thrift.NewTJSONProtocolFactory()
    jsProt2274 := factory2273.GetProtocol(mbTrans2271)
    argvalue0 := hive_metastore.NewCommitTxnRequest()
    err2275 := argvalue0.Read(context.Background(), jsProt2274)
    if err2275 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CommitTxn(context.Background(), value0))
    fmt.Print("\n")
    break
  case "repl_tbl_writeid_state":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReplTblWriteidState requires 1 args")
      flag.Usage()
    }
    arg2276 := flag.Arg(1)
    mbTrans2277 := thrift.NewTMemoryBufferLen(len(arg2276))
    defer mbTrans2277.Close()
    _, err2278 := mbTrans2277.WriteString(arg2276)
    if err2278 != nil {
      Usage()
      return
    }
    factory2279 := thrift.NewTJSONProtocolFactory()
    jsProt2280 := factory2279.GetProtocol(mbTrans2277)
    argvalue0 := hive_metastore.NewReplTblWriteIdStateRequest()
    err2281 := argvalue0.Read(context.Background(), jsProt2280)
    if err2281 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReplTblWriteidState(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_valid_write_ids":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetValidWriteIds requires 1 args")
      flag.Usage()
    }
    arg2282 := flag.Arg(1)
    mbTrans2283 := thrift.NewTMemoryBufferLen(len(arg2282))
    defer mbTrans2283.Close()
    _, err2284 := mbTrans2283.WriteString(arg2282)
    if err2284 != nil {
      Usage()
      return
    }
    factory2285 := thrift.NewTJSONProtocolFactory()
    jsProt2286 := factory2285.GetProtocol(mbTrans2283)
    argvalue0 := hive_metastore.NewGetValidWriteIdsRequest()
    err2287 := argvalue0.Read(context.Background(), jsProt2286)
    if err2287 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetValidWriteIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "allocate_table_write_ids":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AllocateTableWriteIds requires 1 args")
      flag.Usage()
    }
    arg2288 := flag.Arg(1)
    mbTrans2289 := thrift.NewTMemoryBufferLen(len(arg2288))
    defer mbTrans2289.Close()
    _, err2290 := mbTrans2289.WriteString(arg2288)
    if err2290 != nil {
      Usage()
      return
    }
    factory2291 := thrift.NewTJSONProtocolFactory()
    jsProt2292 := factory2291.GetProtocol(mbTrans2289)
    argvalue0 := hive_metastore.NewAllocateTableWriteIdsRequest()
    err2293 := argvalue0.Read(context.Background(), jsProt2292)
    if err2293 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AllocateTableWriteIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Lock requires 1 args")
      flag.Usage()
    }
    arg2294 := flag.Arg(1)
    mbTrans2295 := thrift.NewTMemoryBufferLen(len(arg2294))
    defer mbTrans2295.Close()
    _, err2296 := mbTrans2295.WriteString(arg2294)
    if err2296 != nil {
      Usage()
      return
    }
    factory2297 := thrift.NewTJSONProtocolFactory()
    jsProt2298 := factory2297.GetProtocol(mbTrans2295)
    argvalue0 := hive_metastore.NewLockRequest()
    err2299 := argvalue0.Read(context.Background(), jsProt2298)
    if err2299 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Lock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "check_lock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckLock requires 1 args")
      flag.Usage()
    }
    arg2300 := flag.Arg(1)
    mbTrans2301 := thrift.NewTMemoryBufferLen(len(arg2300))
    defer mbTrans2301.Close()
    _, err2302 := mbTrans2301.WriteString(arg2300)
    if err2302 != nil {
      Usage()
      return
    }
    factory2303 := thrift.NewTJSONProtocolFactory()
    jsProt2304 := factory2303.GetProtocol(mbTrans2301)
    argvalue0 := hive_metastore.NewCheckLockRequest()
    err2305 := argvalue0.Read(context.Background(), jsProt2304)
    if err2305 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckLock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unlock":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Unlock requires 1 args")
      flag.Usage()
    }
    arg2306 := flag.Arg(1)
    mbTrans2307 := thrift.NewTMemoryBufferLen(len(arg2306))
    defer mbTrans2307.Close()
    _, err2308 := mbTrans2307.WriteString(arg2306)
    if err2308 != nil {
      Usage()
      return
    }
    factory2309 := thrift.NewTJSONProtocolFactory()
    jsProt2310 := factory2309.GetProtocol(mbTrans2307)
    argvalue0 := hive_metastore.NewUnlockRequest()
    err2311 := argvalue0.Read(context.Background(), jsProt2310)
    if err2311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Unlock(context.Background(), value0))
    fmt.Print("\n")
    break
  case "show_locks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowLocks requires 1 args")
      flag.Usage()
    }
    arg2312 := flag.Arg(1)
    mbTrans2313 := thrift.NewTMemoryBufferLen(len(arg2312))
    defer mbTrans2313.Close()
    _, err2314 := mbTrans2313.WriteString(arg2312)
    if err2314 != nil {
      Usage()
      return
    }
    factory2315 := thrift.NewTJSONProtocolFactory()
    jsProt2316 := factory2315.GetProtocol(mbTrans2313)
    argvalue0 := hive_metastore.NewShowLocksRequest()
    err2317 := argvalue0.Read(context.Background(), jsProt2316)
    if err2317 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowLocks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "heartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Heartbeat requires 1 args")
      flag.Usage()
    }
    arg2318 := flag.Arg(1)
    mbTrans2319 := thrift.NewTMemoryBufferLen(len(arg2318))
    defer mbTrans2319.Close()
    _, err2320 := mbTrans2319.WriteString(arg2318)
    if err2320 != nil {
      Usage()
      return
    }
    factory2321 := thrift.NewTJSONProtocolFactory()
    jsProt2322 := factory2321.GetProtocol(mbTrans2319)
    argvalue0 := hive_metastore.NewHeartbeatRequest()
    err2323 := argvalue0.Read(context.Background(), jsProt2322)
    if err2323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Heartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "heartbeat_txn_range":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartbeatTxnRange requires 1 args")
      flag.Usage()
    }
    arg2324 := flag.Arg(1)
    mbTrans2325 := thrift.NewTMemoryBufferLen(len(arg2324))
    defer mbTrans2325.Close()
    _, err2326 := mbTrans2325.WriteString(arg2324)
    if err2326 != nil {
      Usage()
      return
    }
    factory2327 := thrift.NewTJSONProtocolFactory()
    jsProt2328 := factory2327.GetProtocol(mbTrans2325)
    argvalue0 := hive_metastore.NewHeartbeatTxnRangeRequest()
    err2329 := argvalue0.Read(context.Background(), jsProt2328)
    if err2329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartbeatTxnRange(context.Background(), value0))
    fmt.Print("\n")
    break
  case "compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact requires 1 args")
      flag.Usage()
    }
    arg2330 := flag.Arg(1)
    mbTrans2331 := thrift.NewTMemoryBufferLen(len(arg2330))
    defer mbTrans2331.Close()
    _, err2332 := mbTrans2331.WriteString(arg2330)
    if err2332 != nil {
      Usage()
      return
    }
    factory2333 := thrift.NewTJSONProtocolFactory()
    jsProt2334 := factory2333.GetProtocol(mbTrans2331)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err2335 := argvalue0.Read(context.Background(), jsProt2334)
    if err2335 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "compact2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Compact2 requires 1 args")
      flag.Usage()
    }
    arg2336 := flag.Arg(1)
    mbTrans2337 := thrift.NewTMemoryBufferLen(len(arg2336))
    defer mbTrans2337.Close()
    _, err2338 := mbTrans2337.WriteString(arg2336)
    if err2338 != nil {
      Usage()
      return
    }
    factory2339 := thrift.NewTJSONProtocolFactory()
    jsProt2340 := factory2339.GetProtocol(mbTrans2337)
    argvalue0 := hive_metastore.NewCompactionRequest()
    err2341 := argvalue0.Read(context.Background(), jsProt2340)
    if err2341 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Compact2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "show_compact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ShowCompact requires 1 args")
      flag.Usage()
    }
    arg2342 := flag.Arg(1)
    mbTrans2343 := thrift.NewTMemoryBufferLen(len(arg2342))
    defer mbTrans2343.Close()
    _, err2344 := mbTrans2343.WriteString(arg2342)
    if err2344 != nil {
      Usage()
      return
    }
    factory2345 := thrift.NewTJSONProtocolFactory()
    jsProt2346 := factory2345.GetProtocol(mbTrans2343)
    argvalue0 := hive_metastore.NewShowCompactRequest()
    err2347 := argvalue0.Read(context.Background(), jsProt2346)
    if err2347 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ShowCompact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_dynamic_partitions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddDynamicPartitions requires 1 args")
      flag.Usage()
    }
    arg2348 := flag.Arg(1)
    mbTrans2349 := thrift.NewTMemoryBufferLen(len(arg2348))
    defer mbTrans2349.Close()
    _, err2350 := mbTrans2349.WriteString(arg2348)
    if err2350 != nil {
      Usage()
      return
    }
    factory2351 := thrift.NewTJSONProtocolFactory()
    jsProt2352 := factory2351.GetProtocol(mbTrans2349)
    argvalue0 := hive_metastore.NewAddDynamicPartitions()
    err2353 := argvalue0.Read(context.Background(), jsProt2352)
    if err2353 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddDynamicPartitions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_next_notification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNextNotification requires 1 args")
      flag.Usage()
    }
    arg2354 := flag.Arg(1)
    mbTrans2355 := thrift.NewTMemoryBufferLen(len(arg2354))
    defer mbTrans2355.Close()
    _, err2356 := mbTrans2355.WriteString(arg2354)
    if err2356 != nil {
      Usage()
      return
    }
    factory2357 := thrift.NewTJSONProtocolFactory()
    jsProt2358 := factory2357.GetProtocol(mbTrans2355)
    argvalue0 := hive_metastore.NewNotificationEventRequest()
    err2359 := argvalue0.Read(context.Background(), jsProt2358)
    if err2359 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNextNotification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_current_notificationEventId":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCurrentNotificationEventId requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCurrentNotificationEventId(context.Background()))
    fmt.Print("\n")
    break
  case "get_notification_events_count":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationEventsCount requires 1 args")
      flag.Usage()
    }
    arg2360 := flag.Arg(1)
    mbTrans2361 := thrift.NewTMemoryBufferLen(len(arg2360))
    defer mbTrans2361.Close()
    _, err2362 := mbTrans2361.WriteString(arg2360)
    if err2362 != nil {
      Usage()
      return
    }
    factory2363 := thrift.NewTJSONProtocolFactory()
    jsProt2364 := factory2363.GetProtocol(mbTrans2361)
    argvalue0 := hive_metastore.NewNotificationEventsCountRequest()
    err2365 := argvalue0.Read(context.Background(), jsProt2364)
    if err2365 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotificationEventsCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fire_listener_event":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FireListenerEvent requires 1 args")
      flag.Usage()
    }
    arg2366 := flag.Arg(1)
    mbTrans2367 := thrift.NewTMemoryBufferLen(len(arg2366))
    defer mbTrans2367.Close()
    _, err2368 := mbTrans2367.WriteString(arg2366)
    if err2368 != nil {
      Usage()
      return
    }
    factory2369 := thrift.NewTJSONProtocolFactory()
    jsProt2370 := factory2369.GetProtocol(mbTrans2367)
    argvalue0 := hive_metastore.NewFireEventRequest()
    err2371 := argvalue0.Read(context.Background(), jsProt2370)
    if err2371 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FireListenerEvent(context.Background(), value0))
    fmt.Print("\n")
    break
  case "flushCache":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "FlushCache requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.FlushCache(context.Background()))
    fmt.Print("\n")
    break
  case "cm_recycle":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CmRecycle requires 1 args")
      flag.Usage()
    }
    arg2372 := flag.Arg(1)
    mbTrans2373 := thrift.NewTMemoryBufferLen(len(arg2372))
    defer mbTrans2373.Close()
    _, err2374 := mbTrans2373.WriteString(arg2372)
    if err2374 != nil {
      Usage()
      return
    }
    factory2375 := thrift.NewTJSONProtocolFactory()
    jsProt2376 := factory2375.GetProtocol(mbTrans2373)
    argvalue0 := hive_metastore.NewCmRecycleRequest()
    err2377 := argvalue0.Read(context.Background(), jsProt2376)
    if err2377 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CmRecycle(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_file_metadata_by_expr":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadataByExpr requires 1 args")
      flag.Usage()
    }
    arg2378 := flag.Arg(1)
    mbTrans2379 := thrift.NewTMemoryBufferLen(len(arg2378))
    defer mbTrans2379.Close()
    _, err2380 := mbTrans2379.WriteString(arg2378)
    if err2380 != nil {
      Usage()
      return
    }
    factory2381 := thrift.NewTJSONProtocolFactory()
    jsProt2382 := factory2381.GetProtocol(mbTrans2379)
    argvalue0 := hive_metastore.NewGetFileMetadataByExprRequest()
    err2383 := argvalue0.Read(context.Background(), jsProt2382)
    if err2383 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadataByExpr(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2384 := flag.Arg(1)
    mbTrans2385 := thrift.NewTMemoryBufferLen(len(arg2384))
    defer mbTrans2385.Close()
    _, err2386 := mbTrans2385.WriteString(arg2384)
    if err2386 != nil {
      Usage()
      return
    }
    factory2387 := thrift.NewTJSONProtocolFactory()
    jsProt2388 := factory2387.GetProtocol(mbTrans2385)
    argvalue0 := hive_metastore.NewGetFileMetadataRequest()
    err2389 := argvalue0.Read(context.Background(), jsProt2388)
    if err2389 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "put_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PutFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2390 := flag.Arg(1)
    mbTrans2391 := thrift.NewTMemoryBufferLen(len(arg2390))
    defer mbTrans2391.Close()
    _, err2392 := mbTrans2391.WriteString(arg2390)
    if err2392 != nil {
      Usage()
      return
    }
    factory2393 := thrift.NewTJSONProtocolFactory()
    jsProt2394 := factory2393.GetProtocol(mbTrans2391)
    argvalue0 := hive_metastore.NewPutFileMetadataRequest()
    err2395 := argvalue0.Read(context.Background(), jsProt2394)
    if err2395 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PutFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "clear_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ClearFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2396 := flag.Arg(1)
    mbTrans2397 := thrift.NewTMemoryBufferLen(len(arg2396))
    defer mbTrans2397.Close()
    _, err2398 := mbTrans2397.WriteString(arg2396)
    if err2398 != nil {
      Usage()
      return
    }
    factory2399 := thrift.NewTJSONProtocolFactory()
    jsProt2400 := factory2399.GetProtocol(mbTrans2397)
    argvalue0 := hive_metastore.NewClearFileMetadataRequest()
    err2401 := argvalue0.Read(context.Background(), jsProt2400)
    if err2401 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ClearFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "cache_file_metadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CacheFileMetadata requires 1 args")
      flag.Usage()
    }
    arg2402 := flag.Arg(1)
    mbTrans2403 := thrift.NewTMemoryBufferLen(len(arg2402))
    defer mbTrans2403.Close()
    _, err2404 := mbTrans2403.WriteString(arg2402)
    if err2404 != nil {
      Usage()
      return
    }
    factory2405 := thrift.NewTJSONProtocolFactory()
    jsProt2406 := factory2405.GetProtocol(mbTrans2403)
    argvalue0 := hive_metastore.NewCacheFileMetadataRequest()
    err2407 := argvalue0.Read(context.Background(), jsProt2406)
    if err2407 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CacheFileMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_metastore_db_uuid":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMetastoreDbUUID requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMetastoreDbUUID(context.Background()))
    fmt.Print("\n")
    break
  case "create_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2408 := flag.Arg(1)
    mbTrans2409 := thrift.NewTMemoryBufferLen(len(arg2408))
    defer mbTrans2409.Close()
    _, err2410 := mbTrans2409.WriteString(arg2408)
    if err2410 != nil {
      Usage()
      return
    }
    factory2411 := thrift.NewTJSONProtocolFactory()
    jsProt2412 := factory2411.GetProtocol(mbTrans2409)
    argvalue0 := hive_metastore.NewWMCreateResourcePlanRequest()
    err2413 := argvalue0.Read(context.Background(), jsProt2412)
    if err2413 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2414 := flag.Arg(1)
    mbTrans2415 := thrift.NewTMemoryBufferLen(len(arg2414))
    defer mbTrans2415.Close()
    _, err2416 := mbTrans2415.WriteString(arg2414)
    if err2416 != nil {
      Usage()
      return
    }
    factory2417 := thrift.NewTJSONProtocolFactory()
    jsProt2418 := factory2417.GetProtocol(mbTrans2415)
    argvalue0 := hive_metastore.NewWMGetResourcePlanRequest()
    err2419 := argvalue0.Read(context.Background(), jsProt2418)
    if err2419 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_active_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2420 := flag.Arg(1)
    mbTrans2421 := thrift.NewTMemoryBufferLen(len(arg2420))
    defer mbTrans2421.Close()
    _, err2422 := mbTrans2421.WriteString(arg2420)
    if err2422 != nil {
      Usage()
      return
    }
    factory2423 := thrift.NewTJSONProtocolFactory()
    jsProt2424 := factory2423.GetProtocol(mbTrans2421)
    argvalue0 := hive_metastore.NewWMGetActiveResourcePlanRequest()
    err2425 := argvalue0.Read(context.Background(), jsProt2424)
    if err2425 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetActiveResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_all_resource_plans":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllResourcePlans requires 1 args")
      flag.Usage()
    }
    arg2426 := flag.Arg(1)
    mbTrans2427 := thrift.NewTMemoryBufferLen(len(arg2426))
    defer mbTrans2427.Close()
    _, err2428 := mbTrans2427.WriteString(arg2426)
    if err2428 != nil {
      Usage()
      return
    }
    factory2429 := thrift.NewTJSONProtocolFactory()
    jsProt2430 := factory2429.GetProtocol(mbTrans2427)
    argvalue0 := hive_metastore.NewWMGetAllResourcePlanRequest()
    err2431 := argvalue0.Read(context.Background(), jsProt2430)
    if err2431 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAllResourcePlans(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2432 := flag.Arg(1)
    mbTrans2433 := thrift.NewTMemoryBufferLen(len(arg2432))
    defer mbTrans2433.Close()
    _, err2434 := mbTrans2433.WriteString(arg2432)
    if err2434 != nil {
      Usage()
      return
    }
    factory2435 := thrift.NewTJSONProtocolFactory()
    jsProt2436 := factory2435.GetProtocol(mbTrans2433)
    argvalue0 := hive_metastore.NewWMAlterResourcePlanRequest()
    err2437 := argvalue0.Read(context.Background(), jsProt2436)
    if err2437 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "validate_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ValidateResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2438 := flag.Arg(1)
    mbTrans2439 := thrift.NewTMemoryBufferLen(len(arg2438))
    defer mbTrans2439.Close()
    _, err2440 := mbTrans2439.WriteString(arg2438)
    if err2440 != nil {
      Usage()
      return
    }
    factory2441 := thrift.NewTJSONProtocolFactory()
    jsProt2442 := factory2441.GetProtocol(mbTrans2439)
    argvalue0 := hive_metastore.NewWMValidateResourcePlanRequest()
    err2443 := argvalue0.Read(context.Background(), jsProt2442)
    if err2443 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ValidateResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_resource_plan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropResourcePlan requires 1 args")
      flag.Usage()
    }
    arg2444 := flag.Arg(1)
    mbTrans2445 := thrift.NewTMemoryBufferLen(len(arg2444))
    defer mbTrans2445.Close()
    _, err2446 := mbTrans2445.WriteString(arg2444)
    if err2446 != nil {
      Usage()
      return
    }
    factory2447 := thrift.NewTJSONProtocolFactory()
    jsProt2448 := factory2447.GetProtocol(mbTrans2445)
    argvalue0 := hive_metastore.NewWMDropResourcePlanRequest()
    err2449 := argvalue0.Read(context.Background(), jsProt2448)
    if err2449 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropResourcePlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2450 := flag.Arg(1)
    mbTrans2451 := thrift.NewTMemoryBufferLen(len(arg2450))
    defer mbTrans2451.Close()
    _, err2452 := mbTrans2451.WriteString(arg2450)
    if err2452 != nil {
      Usage()
      return
    }
    factory2453 := thrift.NewTJSONProtocolFactory()
    jsProt2454 := factory2453.GetProtocol(mbTrans2451)
    argvalue0 := hive_metastore.NewWMCreateTriggerRequest()
    err2455 := argvalue0.Read(context.Background(), jsProt2454)
    if err2455 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2456 := flag.Arg(1)
    mbTrans2457 := thrift.NewTMemoryBufferLen(len(arg2456))
    defer mbTrans2457.Close()
    _, err2458 := mbTrans2457.WriteString(arg2456)
    if err2458 != nil {
      Usage()
      return
    }
    factory2459 := thrift.NewTJSONProtocolFactory()
    jsProt2460 := factory2459.GetProtocol(mbTrans2457)
    argvalue0 := hive_metastore.NewWMAlterTriggerRequest()
    err2461 := argvalue0.Read(context.Background(), jsProt2460)
    if err2461 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_wm_trigger":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmTrigger requires 1 args")
      flag.Usage()
    }
    arg2462 := flag.Arg(1)
    mbTrans2463 := thrift.NewTMemoryBufferLen(len(arg2462))
    defer mbTrans2463.Close()
    _, err2464 := mbTrans2463.WriteString(arg2462)
    if err2464 != nil {
      Usage()
      return
    }
    factory2465 := thrift.NewTJSONProtocolFactory()
    jsProt2466 := factory2465.GetProtocol(mbTrans2463)
    argvalue0 := hive_metastore.NewWMDropTriggerRequest()
    err2467 := argvalue0.Read(context.Background(), jsProt2466)
    if err2467 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmTrigger(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_triggers_for_resourceplan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTriggersForResourceplan requires 1 args")
      flag.Usage()
    }
    arg2468 := flag.Arg(1)
    mbTrans2469 := thrift.NewTMemoryBufferLen(len(arg2468))
    defer mbTrans2469.Close()
    _, err2470 := mbTrans2469.WriteString(arg2468)
    if err2470 != nil {
      Usage()
      return
    }
    factory2471 := thrift.NewTJSONProtocolFactory()
    jsProt2472 := factory2471.GetProtocol(mbTrans2469)
    argvalue0 := hive_metastore.NewWMGetTriggersForResourePlanRequest()
    err2473 := argvalue0.Read(context.Background(), jsProt2472)
    if err2473 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTriggersForResourceplan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_wm_pool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateWmPool requires 1 args")
      flag.Usage()
    }
    arg2474 := flag.Arg(1)
    mbTrans2475 := thrift.NewTMemoryBufferLen(len(arg2474))
    defer mbTrans2475.Close()
    _, err2476 := mbTrans2475.WriteString(arg2474)
    if err2476 != nil {
      Usage()
      return
    }
    factory2477 := thrift.NewTJSONProtocolFactory()
    jsProt2478 := factory2477.GetProtocol(mbTrans2475)
    argvalue0 := hive_metastore.NewWMCreatePoolRequest()
    err2479 := argvalue0.Read(context.Background(), jsProt2478)
    if err2479 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateWmPool(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_wm_pool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterWmPool requires 1 args")
      flag.Usage()
    }
    arg2480 := flag.Arg(1)
    mbTrans2481 := thrift.NewTMemoryBufferLen(len(arg2480))
    defer mbTrans2481.Close()
    _, err2482 := mbTrans2481.WriteString(arg2480)
    if err2482 != nil {
      Usage()
      return
    }
    factory2483 := thrift.NewTJSONProtocolFactory()
    jsProt2484 := factory2483.GetProtocol(mbTrans2481)
    argvalue0 := hive_metastore.NewWMAlterPoolRequest()
    err2485 := argvalue0.Read(context.Background(), jsProt2484)
    if err2485 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterWmPool(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_wm_pool":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmPool requires 1 args")
      flag.Usage()
    }
    arg2486 := flag.Arg(1)
    mbTrans2487 := thrift.NewTMemoryBufferLen(len(arg2486))
    defer mbTrans2487.Close()
    _, err2488 := mbTrans2487.WriteString(arg2486)
    if err2488 != nil {
      Usage()
      return
    }
    factory2489 := thrift.NewTJSONProtocolFactory()
    jsProt2490 := factory2489.GetProtocol(mbTrans2487)
    argvalue0 := hive_metastore.NewWMDropPoolRequest()
    err2491 := argvalue0.Read(context.Background(), jsProt2490)
    if err2491 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmPool(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_or_update_wm_mapping":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateOrUpdateWmMapping requires 1 args")
      flag.Usage()
    }
    arg2492 := flag.Arg(1)
    mbTrans2493 := thrift.NewTMemoryBufferLen(len(arg2492))
    defer mbTrans2493.Close()
    _, err2494 := mbTrans2493.WriteString(arg2492)
    if err2494 != nil {
      Usage()
      return
    }
    factory2495 := thrift.NewTJSONProtocolFactory()
    jsProt2496 := factory2495.GetProtocol(mbTrans2493)
    argvalue0 := hive_metastore.NewWMCreateOrUpdateMappingRequest()
    err2497 := argvalue0.Read(context.Background(), jsProt2496)
    if err2497 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateOrUpdateWmMapping(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_wm_mapping":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropWmMapping requires 1 args")
      flag.Usage()
    }
    arg2498 := flag.Arg(1)
    mbTrans2499 := thrift.NewTMemoryBufferLen(len(arg2498))
    defer mbTrans2499.Close()
    _, err2500 := mbTrans2499.WriteString(arg2498)
    if err2500 != nil {
      Usage()
      return
    }
    factory2501 := thrift.NewTJSONProtocolFactory()
    jsProt2502 := factory2501.GetProtocol(mbTrans2499)
    argvalue0 := hive_metastore.NewWMDropMappingRequest()
    err2503 := argvalue0.Read(context.Background(), jsProt2502)
    if err2503 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropWmMapping(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_or_drop_wm_trigger_to_pool_mapping":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateOrDropWmTriggerToPoolMapping requires 1 args")
      flag.Usage()
    }
    arg2504 := flag.Arg(1)
    mbTrans2505 := thrift.NewTMemoryBufferLen(len(arg2504))
    defer mbTrans2505.Close()
    _, err2506 := mbTrans2505.WriteString(arg2504)
    if err2506 != nil {
      Usage()
      return
    }
    factory2507 := thrift.NewTJSONProtocolFactory()
    jsProt2508 := factory2507.GetProtocol(mbTrans2505)
    argvalue0 := hive_metastore.NewWMCreateOrDropTriggerToPoolMappingRequest()
    err2509 := argvalue0.Read(context.Background(), jsProt2508)
    if err2509 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateOrDropWmTriggerToPoolMapping(context.Background(), value0))
    fmt.Print("\n")
    break
  case "create_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateIschema requires 1 args")
      flag.Usage()
    }
    arg2510 := flag.Arg(1)
    mbTrans2511 := thrift.NewTMemoryBufferLen(len(arg2510))
    defer mbTrans2511.Close()
    _, err2512 := mbTrans2511.WriteString(arg2510)
    if err2512 != nil {
      Usage()
      return
    }
    factory2513 := thrift.NewTJSONProtocolFactory()
    jsProt2514 := factory2513.GetProtocol(mbTrans2511)
    argvalue0 := hive_metastore.NewISchema()
    err2515 := argvalue0.Read(context.Background(), jsProt2514)
    if err2515 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateIschema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "alter_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterIschema requires 1 args")
      flag.Usage()
    }
    arg2516 := flag.Arg(1)
    mbTrans2517 := thrift.NewTMemoryBufferLen(len(arg2516))
    defer mbTrans2517.Close()
    _, err2518 := mbTrans2517.WriteString(arg2516)
    if err2518 != nil {
      Usage()
      return
    }
    factory2519 := thrift.NewTJSONProtocolFactory()
    jsProt2520 := factory2519.GetProtocol(mbTrans2517)
    argvalue0 := hive_metastore.NewAlterISchemaRequest()
    err2521 := argvalue0.Read(context.Background(), jsProt2520)
    if err2521 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterIschema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetIschema requires 1 args")
      flag.Usage()
    }
    arg2522 := flag.Arg(1)
    mbTrans2523 := thrift.NewTMemoryBufferLen(len(arg2522))
    defer mbTrans2523.Close()
    _, err2524 := mbTrans2523.WriteString(arg2522)
    if err2524 != nil {
      Usage()
      return
    }
    factory2525 := thrift.NewTJSONProtocolFactory()
    jsProt2526 := factory2525.GetProtocol(mbTrans2523)
    argvalue0 := hive_metastore.NewISchemaName()
    err2527 := argvalue0.Read(context.Background(), jsProt2526)
    if err2527 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetIschema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_ischema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropIschema requires 1 args")
      flag.Usage()
    }
    arg2528 := flag.Arg(1)
    mbTrans2529 := thrift.NewTMemoryBufferLen(len(arg2528))
    defer mbTrans2529.Close()
    _, err2530 := mbTrans2529.WriteString(arg2528)
    if err2530 != nil {
      Usage()
      return
    }
    factory2531 := thrift.NewTJSONProtocolFactory()
    jsProt2532 := factory2531.GetProtocol(mbTrans2529)
    argvalue0 := hive_metastore.NewISchemaName()
    err2533 := argvalue0.Read(context.Background(), jsProt2532)
    if err2533 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropIschema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_schema_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddSchemaVersion requires 1 args")
      flag.Usage()
    }
    arg2534 := flag.Arg(1)
    mbTrans2535 := thrift.NewTMemoryBufferLen(len(arg2534))
    defer mbTrans2535.Close()
    _, err2536 := mbTrans2535.WriteString(arg2534)
    if err2536 != nil {
      Usage()
      return
    }
    factory2537 := thrift.NewTJSONProtocolFactory()
    jsProt2538 := factory2537.GetProtocol(mbTrans2535)
    argvalue0 := hive_metastore.NewSchemaVersion()
    err2539 := argvalue0.Read(context.Background(), jsProt2538)
    if err2539 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddSchemaVersion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_schema_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemaVersion requires 1 args")
      flag.Usage()
    }
    arg2540 := flag.Arg(1)
    mbTrans2541 := thrift.NewTMemoryBufferLen(len(arg2540))
    defer mbTrans2541.Close()
    _, err2542 := mbTrans2541.WriteString(arg2540)
    if err2542 != nil {
      Usage()
      return
    }
    factory2543 := thrift.NewTJSONProtocolFactory()
    jsProt2544 := factory2543.GetProtocol(mbTrans2541)
    argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
    err2545 := argvalue0.Read(context.Background(), jsProt2544)
    if err2545 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemaVersion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_schema_latest_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemaLatestVersion requires 1 args")
      flag.Usage()
    }
    arg2546 := flag.Arg(1)
    mbTrans2547 := thrift.NewTMemoryBufferLen(len(arg2546))
    defer mbTrans2547.Close()
    _, err2548 := mbTrans2547.WriteString(arg2546)
    if err2548 != nil {
      Usage()
      return
    }
    factory2549 := thrift.NewTJSONProtocolFactory()
    jsProt2550 := factory2549.GetProtocol(mbTrans2547)
    argvalue0 := hive_metastore.NewISchemaName()
    err2551 := argvalue0.Read(context.Background(), jsProt2550)
    if err2551 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemaLatestVersion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_schema_all_versions":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemaAllVersions requires 1 args")
      flag.Usage()
    }
    arg2552 := flag.Arg(1)
    mbTrans2553 := thrift.NewTMemoryBufferLen(len(arg2552))
    defer mbTrans2553.Close()
    _, err2554 := mbTrans2553.WriteString(arg2552)
    if err2554 != nil {
      Usage()
      return
    }
    factory2555 := thrift.NewTJSONProtocolFactory()
    jsProt2556 := factory2555.GetProtocol(mbTrans2553)
    argvalue0 := hive_metastore.NewISchemaName()
    err2557 := argvalue0.Read(context.Background(), jsProt2556)
    if err2557 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemaAllVersions(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drop_schema_version":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSchemaVersion requires 1 args")
      flag.Usage()
    }
    arg2558 := flag.Arg(1)
    mbTrans2559 := thrift.NewTMemoryBufferLen(len(arg2558))
    defer mbTrans2559.Close()
    _, err2560 := mbTrans2559.WriteString(arg2558)
    if err2560 != nil {
      Usage()
      return
    }
    factory2561 := thrift.NewTJSONProtocolFactory()
    jsProt2562 := factory2561.GetProtocol(mbTrans2559)
    argvalue0 := hive_metastore.NewSchemaVersionDescriptor()
    err2563 := argvalue0.Read(context.Background(), jsProt2562)
    if err2563 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSchemaVersion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_schemas_by_cols":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSchemasByCols requires 1 args")
      flag.Usage()
    }
    arg2564 := flag.Arg(1)
    mbTrans2565 := thrift.NewTMemoryBufferLen(len(arg2564))
    defer mbTrans2565.Close()
    _, err2566 := mbTrans2565.WriteString(arg2564)
    if err2566 != nil {
      Usage()
      return
    }
    factory2567 := thrift.NewTJSONProtocolFactory()
    jsProt2568 := factory2567.GetProtocol(mbTrans2565)
    argvalue0 := hive_metastore.NewFindSchemasByColsRqst()
    err2569 := argvalue0.Read(context.Background(), jsProt2568)
    if err2569 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSchemasByCols(context.Background(), value0))
    fmt.Print("\n")
    break
  case "map_schema_version_to_serde":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MapSchemaVersionToSerde requires 1 args")
      flag.Usage()
    }
    arg2570 := flag.Arg(1)
    mbTrans2571 := thrift.NewTMemoryBufferLen(len(arg2570))
    defer mbTrans2571.Close()
    _, err2572 := mbTrans2571.WriteString(arg2570)
    if err2572 != nil {
      Usage()
      return
    }
    factory2573 := thrift.NewTJSONProtocolFactory()
    jsProt2574 := factory2573.GetProtocol(mbTrans2571)
    argvalue0 := hive_metastore.NewMapSchemaVersionToSerdeRequest()
    err2575 := argvalue0.Read(context.Background(), jsProt2574)
    if err2575 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MapSchemaVersionToSerde(context.Background(), value0))
    fmt.Print("\n")
    break
  case "set_schema_version_state":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetSchemaVersionState requires 1 args")
      flag.Usage()
    }
    arg2576 := flag.Arg(1)
    mbTrans2577 := thrift.NewTMemoryBufferLen(len(arg2576))
    defer mbTrans2577.Close()
    _, err2578 := mbTrans2577.WriteString(arg2576)
    if err2578 != nil {
      Usage()
      return
    }
    factory2579 := thrift.NewTJSONProtocolFactory()
    jsProt2580 := factory2579.GetProtocol(mbTrans2577)
    argvalue0 := hive_metastore.NewSetSchemaVersionStateRequest()
    err2581 := argvalue0.Read(context.Background(), jsProt2580)
    if err2581 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetSchemaVersionState(context.Background(), value0))
    fmt.Print("\n")
    break
  case "add_serde":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddSerde requires 1 args")
      flag.Usage()
    }
    arg2582 := flag.Arg(1)
    mbTrans2583 := thrift.NewTMemoryBufferLen(len(arg2582))
    defer mbTrans2583.Close()
    _, err2584 := mbTrans2583.WriteString(arg2582)
    if err2584 != nil {
      Usage()
      return
    }
    factory2585 := thrift.NewTJSONProtocolFactory()
    jsProt2586 := factory2585.GetProtocol(mbTrans2583)
    argvalue0 := hive_metastore.NewSerDeInfo()
    err2587 := argvalue0.Read(context.Background(), jsProt2586)
    if err2587 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddSerde(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_serde":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSerde requires 1 args")
      flag.Usage()
    }
    arg2588 := flag.Arg(1)
    mbTrans2589 := thrift.NewTMemoryBufferLen(len(arg2588))
    defer mbTrans2589.Close()
    _, err2590 := mbTrans2589.WriteString(arg2588)
    if err2590 != nil {
      Usage()
      return
    }
    factory2591 := thrift.NewTJSONProtocolFactory()
    jsProt2592 := factory2591.GetProtocol(mbTrans2589)
    argvalue0 := hive_metastore.NewGetSerdeRequest()
    err2593 := argvalue0.Read(context.Background(), jsProt2592)
    if err2593 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSerde(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_lock_materialization_rebuild":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetLockMaterializationRebuild requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err2596 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err2596 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetLockMaterializationRebuild(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "heartbeat_lock_materialization_rebuild":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "HeartbeatLockMaterializationRebuild requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err2599 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err2599 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.HeartbeatLockMaterializationRebuild(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "add_runtime_stats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddRuntimeStats requires 1 args")
      flag.Usage()
    }
    arg2600 := flag.Arg(1)
    mbTrans2601 := thrift.NewTMemoryBufferLen(len(arg2600))
    defer mbTrans2601.Close()
    _, err2602 := mbTrans2601.WriteString(arg2600)
    if err2602 != nil {
      Usage()
      return
    }
    factory2603 := thrift.NewTJSONProtocolFactory()
    jsProt2604 := factory2603.GetProtocol(mbTrans2601)
    argvalue0 := hive_metastore.NewRuntimeStat()
    err2605 := argvalue0.Read(context.Background(), jsProt2604)
    if err2605 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddRuntimeStats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "get_runtime_stats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRuntimeStats requires 1 args")
      flag.Usage()
    }
    arg2606 := flag.Arg(1)
    mbTrans2607 := thrift.NewTMemoryBufferLen(len(arg2606))
    defer mbTrans2607.Close()
    _, err2608 := mbTrans2607.WriteString(arg2606)
    if err2608 != nil {
      Usage()
      return
    }
    factory2609 := thrift.NewTJSONProtocolFactory()
    jsProt2610 := factory2609.GetProtocol(mbTrans2607)
    argvalue0 := hive_metastore.NewGetRuntimeStatsRequest()
    err2611 := argvalue0.Read(context.Background(), jsProt2610)
    if err2611 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetRuntimeStats(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getName":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetName requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetName(context.Background()))
    fmt.Print("\n")
    break
  case "getVersion":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetVersion(context.Background()))
    fmt.Print("\n")
    break
  case "getStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatus(context.Background()))
    fmt.Print("\n")
    break
  case "getStatusDetails":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetStatusDetails requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetStatusDetails(context.Background()))
    fmt.Print("\n")
    break
  case "getCounters":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCounters requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCounters(context.Background()))
    fmt.Print("\n")
    break
  case "getCounter":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCounter requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCounter(context.Background(), value0))
    fmt.Print("\n")
    break
  case "setOption":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SetOption(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getOption":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetOption requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetOption(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getOptions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOptions(context.Background()))
    fmt.Print("\n")
    break
  case "getCpuProfile":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCpuProfile requires 1 args")
      flag.Usage()
    }
    tmp0, err2616 := (strconv.Atoi(flag.Arg(1)))
    if err2616 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetCpuProfile(context.Background(), value0))
    fmt.Print("\n")
    break
  case "aliveSince":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.AliveSince(context.Background()))
    fmt.Print("\n")
    break
  case "reinitialize":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Reinitialize(context.Background()))
    fmt.Print("\n")
    break
  case "shutdown":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Shutdown(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
